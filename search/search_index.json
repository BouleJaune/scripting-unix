{"config":{"lang":["fr"],"separator":"[\\s\\-\\.]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Les objectifs de la formation</p> <p>Conna\u00eetre les caract\u00e9ristiques des principaux outils de scripting Unix/Linux</p> <p>Savoir lire des scripts Unix/Linux \u00e9crits en Shell, Perl, Python Ruby ou AWK</p> <p>\u00catre capable d'\u00e9crire des scripts simples d'exploitation Unix/Linux</p> <p>Comprendre comment choisir l'outil le plus adapt\u00e9 pour r\u00e9soudre un probl\u00e8me particulier</p> <p>Prez perso et demander le niveau des gens</p>"},{"location":"#le-langage-perl-les-bases","title":"Le langage Perl - les bases","text":"<p>Prez, utilit\u00e9 de nos jours, sp\u00e9cifit\u00e9</p> <p>Pr\u00e9sentation de Perl</p> <p>Les variables scalaires, les tableaux, les op\u00e9rateurs</p> <p>Les instructions de contr\u00f4le</p> <p>Les tableaux associatifs (hash)</p>"},{"location":"#le-langage-ruby-les-bases","title":"Le langage Ruby - les bases","text":"<p>Pr\u00e9sentation de Ruby Les variables Les cha\u00eenes de caract\u00e8res\\ Les structures de contr\u00f4le\\ Les tableaux, les it\u00e9rateurs - Les hash\\</p>"},{"location":"#le-langage-python-les-bases","title":"Le langage Python - les bases","text":"<p>Python est un langage de programmation interpr\u00e9t\u00e9 \u00e0 usage extr\u00eamement populaire de nos jours. Sa facilit\u00e9 facilit\u00e9 d'apprentissage et de lecture est ce qui a fait sa popularit\u00e9 initiale, aujourd'hui c'est la communaut\u00e9 qui en fait sa force avec les milliers de modules et programmes Python disponibles.</p> <p>Pour un administrateur syst\u00e8me et/ou un devops Python est un langage tr\u00e8s attirant, son principal d\u00e9faut, la potentielle lenteur au runtime, n'est pas un probl\u00e8me dans nos cas d'usage. Python est aussi ce qui est derri\u00e8re Ansible et permet la cr\u00e9ation de modules Ansible customs, le plus important outil d'infrastructure as code (IAC) du moment. Il est aussi par d\u00e9faut install\u00e9 sur la tr\u00e8s grande majorit\u00e9 des distributions Linux.</p>"},{"location":"#syntaxe","title":"Syntaxe","text":"<p>Variables et expressions\\ Les tableaux, les cha\u00eenes de caract\u00e8res\\ Les instructions de contr\u00f4le\\ Les dictionnaires (hash)\\</p>"},{"location":"#exercices-python","title":"Exercices Python","text":""},{"location":"#les-expressions-regulieres-regexp","title":"Les expressions r\u00e9guli\u00e8res (RegExp)","text":"<p>regex car tout est texte Importance de grep et sed  RegExp en Shell (via grep et sed)\\ RegExp en Perl (normes)\\ RegExp en Python (module re mais osef)\\</p>"},{"location":"#la-modularite-en-shell-perl-python-et-ruby","title":"La modularit\u00e9 en Shell, Perl, Python et Ruby","text":"<p>parler de direnv, de requirements.txt, de venv python, de classes python (osef un peu) y a des trucs pour shell (bpkg) mais pas le but, illogique, shell = sp\u00e9cifique task</p> <p>Les fonctions =&gt; dans les parties syntaxes\\ Les paquetages=&gt; oui\\ L'approche objet =&gt; syntaxe\\ Utilisation de biblioth\u00e8ques externes=&gt; oui\\</p>"},{"location":"#la-programmation-parallele-en-shell-perl-python-et-ruby","title":"La programmation parall\u00e8le en Shell, Perl, Python et Ruby","text":"<p>diff\u00e9rentes concurrency xargs pipes et parallel et &amp; + wait pour shell multi-threading et async pour python</p>"},{"location":"#resoudre-des-problemes-avec-le-shell-perl-python-et-ruby","title":"R\u00e9soudre des probl\u00e8mes avec le Shell, Perl, Python et Ruby","text":"<p>Ecrire des scripts d'exploitation (activer une application, les signaux, ...)\\ Manipuler des fichiers\\ Faire des calculs\\ Ecrire des CGI Web\\ Acc\u00e9der \u00e0 des bases de donn\u00e9es\\ Manipuler des fichiers XML (parsing, validation, cr\u00e9ation)\\ Cr\u00e9er des applications r\u00e9seaux TCP/IP\\</p> <p>Ptit serveur web G\u00e9n\u00e9ration de fichier dans un dossier service shell filewatcher qui trigger un truc xargs et des pipes pour multiprocessing perl ou grep pour regex awk pour un truc</p> <p>9 - AWK : un sous-ensemble POSIX/ISO du langage Perl</p> <p>10 - Conclusion</p>"},{"location":"#quel-outil-pour-quoi-faire","title":"Quel outil pour quoi faire?","text":""},{"location":"#interets-des-shells-unix","title":"Int\u00e9rets des Shells Unix","text":"<p>Le shell malgr\u00e9 sa syntaxe archaique et ses fonctionnalit\u00e9s limit\u00e9es vis \u00e0 vis de langages interpr\u00e9t\u00e9s \u00e0 usage g\u00e9n\u00e9ral a tout de m\u00eame encore des avantages.</p>"},{"location":"#actions-uniques","title":"Actions uniques","text":"<p>Utile lorsque l'on veut faire une t\u00e2che relativement simple que quelques fois.  Maitriser le shell permet d'\u00eatre beaucoup plus rapide dans un environnement Unix Exemple: extraire des donn\u00e9es textes et les process sommairement <code>cat / sed / cut / tr</code> ...</p>"},{"location":"#manipulation-de-binaires","title":"Manipulation de binaires","text":"<p>L'une des force de Bash par rapport \u00e0 d'autres langages et sa facilit\u00e9 \u00e0 manipuler directement des binaires. En python, par exemple, on peut aussi manipuler des binaires, mais on sent clairement que cela est moins pens\u00e9 pour. Exemple : Utiliser un ex\u00e9cutable propri\u00e9taire (import baroc), utiliser l'output d'un script python et l'injecter ailleurs etc</p>"},{"location":"#manipulation-de-texte","title":"Manipulation de texte","text":"<p>Tout est texte Exemple : lire des logs</p>"},{"location":"#manipulation-os-linux","title":"Manipulation OS linux","text":"<p>les deux derniers ~= Manipulation linux pur car linux d\u00e9j\u00e0 tout fichiers et texte + binaires unix</p> <p>Philo kiss, pleins de petits binaires linux avec une seule tache, trop complexe go python</p>"},{"location":"awk-regex/","title":"Introduction \u00e0 <code>awk</code> et aux Regex","text":""},{"location":"awk-regex/#awk","title":"Awk","text":"<p><code>awk</code> est un puissant langage de programmation et un utilitaire en ligne de commande dans les syst\u00e8mes Unix et Linux. Il est con\u00e7u pour la manipulation de texte et le traitement de donn\u00e9es bas\u00e9es sur des fichiers texte ou des flux d'entr\u00e9e. <code>awk</code> permet de rechercher des motifs, extraire et transformer des donn\u00e9es.</p> <p>Les fichiers de tests sont r\u00e9cup\u00e9rables ici :</p> <pre><code>curl fichier.txt numbers.txt\n</code></pre> <p>Ils ont \u00e9t\u00e9s g\u00e9n\u00e9r\u00e9s pour <code>numbers.txt</code> avec : <pre><code>awk 'BEGIN { for (i = 1; i&lt;= 10; i++) print int(100*rand()),  int(100*rand()), int(100*rand()) }' &gt; numbers.txt\n</code></pre></p>"},{"location":"awk-regex/#structure-de-commande","title":"Structure de Commande","text":"<p>La syntaxe de base de <code>awk</code> est la suivante : <pre><code>awk 'pattern { action }' fichier\n</code></pre></p> <ul> <li>pattern : Un motif qui, s'il est vrai pour une ligne donn\u00e9e, d\u00e9clenche l'ex\u00e9cution de l'action.</li> <li>action : Une s\u00e9rie d'instructions entre {} qui sont ex\u00e9cut\u00e9es lorsque le motif est trouv\u00e9.</li> </ul>"},{"location":"awk-regex/#variables-par-defaut","title":"Variables par d\u00e9faut","text":"<p>Awk fournit une liste de variables d\u00e9j\u00e0 initialis\u00e9es, en voici une partie: </p> <ul> <li><code>NR</code> : Num\u00e9ro de ligne global (cumul\u00e9 \u00e0 travers tous les fichiers d'entr\u00e9e (Number of Rows).</li> <li><code>$0</code> : La ligne enti\u00e8re actuelle.</li> <li><code>$1</code>, <code>$2</code>, ..., <code>$n</code> : Les n-i\u00e8mes champs d'une ligne, o\u00f9 le s\u00e9parateur de champs par d\u00e9faut est l'espace ou la tabulation.</li> <li><code>FS</code> : Le s\u00e9parateur de champs (par d\u00e9faut, espace ou tabulation).</li> <li><code>OFS</code> : Le s\u00e9parateur de champs de sortie (par d\u00e9faut, espace).</li> <li><code>RS</code> : Le s\u00e9parateur d'enregistrements (par d\u00e9faut, nouvelle ligne).</li> <li><code>ORS</code> : Le s\u00e9parateur d'enregistrements de sortie (par d\u00e9faut, nouvelle ligne).</li> <li><code>FNR</code> : Le num\u00e9ro de ligne actuel dans le fichier d'entr\u00e9e actuel (File Number of Rows).</li> <li><code>NF</code> : Le nombre de champs dans la ligne courante (Number of Fields).</li> <li><code>FILENAME</code> : Le nom du fichier d'entr\u00e9e actuel.</li> </ul> <p>On peut changer le d\u00e9limiteur par d\u00e9faut avec <code>-F</code>, <code>-F,</code> utilisera <code>,</code> comme d\u00e9limiteur au lieu de tab ou espace.</p> <p>Awk permet aussi de d\u00e9clarer ses propres variables dans les actions :</p> <pre><code>awk '{ n = 0; print n}' fichier.txt\n</code></pre>"},{"location":"awk-regex/#imprimer-des-colonnes-specifiques","title":"Imprimer des Colonnes Sp\u00e9cifiques","text":"<p>Pour imprimer le premier et le troisi\u00e8me champ de chaque ligne d'un fichier :</p> <p><pre><code>awk '{ print $1, $3 }' fichier.txt\n</code></pre> Si aucun pattern n'est fourni alors <code>awk</code> matchera chaque ligne.</p> <p>On peut fournir plusieurs commandes \u00e0 awk en lui fournissant d'autres patterns et actions.</p> <pre><code>awk '{ print $1, $3 } { print $5 }' fichier.txt\n\n# Ou bien en s\u00e9parant sur plusieurs lignes :\nawk '{ print $1, $3 } \\\n{ print $5 }' \\\nfichier.txt\n</code></pre>"},{"location":"awk-regex/#filtrer-par-motif","title":"Filtrer par Motif","text":"<p><code>awk</code> permet de rechercher par expressions r\u00e9guli\u00e8res (vues plus bas) du texte. Pour afficher les lignes contenant le mot \"ERROR\" :</p> <pre><code>awk '/ERROR/ { print $0 }' fichier.txt\n</code></pre>"},{"location":"awk-regex/#calculs-et-operations-sur-les-champs","title":"Calculs et Op\u00e9rations sur les Champs","text":"<p>Pour calculer la somme des valeurs des troisi\u00e8me et quatri\u00e8me champs de chaque ligne:</p> <pre><code>awk '{ somme = $1 + $2; print somme }' numbers.txt\n</code></pre>"},{"location":"awk-regex/#mots-cles-begin-et-end","title":"Mots cl\u00e9s BEGIN et END","text":"<p><code>BEGIN { action }</code> permet d'ex\u00e9cuter une action avant la lecture de la premi\u00e8re ligne. De mani\u00e8re sym\u00e9trique <code>END { action }</code> permet d'\u00e9x\u00e9cuter une action apr\u00e8s la lecture de la derni\u00e8re ligne.</p> <pre><code>awk 'BEGIN { print \"D\u00e9but de traitement\" } \\\n/ERROR/ { print $0 } \\\nEND { print \"Fin de traitement\" }' fichier.txt\n</code></pre> <pre><code># Somme de la premi\u00e8re colonne\nawk 'BEGIN {n=0} {n += $1} END {print n}' numbers.txt\n</code></pre>"},{"location":"awk-regex/#fonctions-integrees","title":"Fonctions Int\u00e9gr\u00e9es","text":"<ul> <li><code>length([string])</code> : Renvoie la longueur d'une cha\u00eene ou du champ courant.</li> <li><code>substr(string, start, length)</code> : Extrait une sous-cha\u00eene de <code>string</code> \u00e0 partir de <code>start</code> sur <code>length</code> caract\u00e8res.</li> <li><code>tolower(string)</code> : Convertit la cha\u00eene en minuscules.</li> <li><code>toupper(string)</code> : Convertit la cha\u00eene en majuscules.</li> <li><code>split(string, array, [separator])</code> : Divise <code>string</code> en \u00e9l\u00e9ments dans <code>array</code>, s\u00e9par\u00e9s par <code>separator</code>.</li> <li><code>match(string, regex)</code> : Renvoie l'indice de d\u00e9part et la longueur de la correspondance de <code>regex</code> dans <code>string</code>.</li> <li><code>gsub(regex, replacement, [target])</code> : Remplace toutes les occurrences de <code>regex</code> par <code>replacement</code> dans <code>target</code> (ou <code>$0</code> si omis).</li> <li><code>sub(regex, replacement, [target])</code> : Remplace la premi\u00e8re occurrence de <code>regex</code> par <code>replacement</code> dans <code>target</code>.</li> <li><code>srand([expr])</code> : Initialise le g\u00e9n\u00e9rateur de nombres al\u00e9atoires avec <code>expr</code> ou l'heure actuelle.</li> <li><code>rand()</code> : Renvoie un nombre al\u00e9atoire entre 0 et 1.</li> </ul>"},{"location":"awk-regex/#exercice","title":"Exercice","text":"<p>Attraper la ligne pr\u00e9c\u00e9dent un match</p> Exemple de solution <pre><code>echo 192.168.1.{1..254} | xargs -n 1 -P 0 ping -c 1 | awk '/1 re\u00e7us/ {print prev} {prev=$0}'\n</code></pre>"},{"location":"awk-regex/#expression-regulieres","title":"Expression R\u00e9guli\u00e8res","text":"<p>Les expressions r\u00e9guli\u00e8res (regex) sont un puissant outil de recherche et de manipulation de texte bas\u00e9 sur des motifs. Elles sont utilis\u00e9es pour correspondre \u00e0 des cha\u00eenes de caract\u00e8res suivant des r\u00e8gles sp\u00e9cifiques.</p>"},{"location":"awk-regex/#variantes-dexpressions-regulieres","title":"Variantes d'expressions r\u00e9guli\u00e8res","text":"<p>Il y a plusieurs variantes de regex. Ces variantes diff\u00e8rent dans leurs syntaxes et possibilit\u00e9s et certains outils utilisent certaines variantes. Les variantes principales sont : </p> <ul> <li>POSIX/GNU Basic Regular Expressions (<code>sed</code>, <code>grep</code>)</li> <li>POSIX/GNU Extended Regular Expressions (<code>awk</code>, <code>-E</code>)</li> <li>Perl-Compatible Regular Expressions (Perl, Python, PHP, Java)</li> </ul> <p>POSIX a d\u00e9fini trois variantes, mais la plus ancienne, simple regular expression (SRE) est depr\u00e9ci\u00e9e. Cependant les deux autres sont r\u00e9trocompatibles.</p>"},{"location":"awk-regex/#posix-basic-regular-expressions-bre","title":"POSIX Basic Regular Expressions (BRE)","text":"<p>Les BRE sont principalement utilis\u00e9es par des outils Unix pour la r\u00e9trocompatibilit\u00e9. Ainsi des outils tels que <code>sed</code> et <code>grep</code> les utilisent par d\u00e9faut.</p> <p>Un caract\u00e8re normal ou une suite de caract\u00e8res correspondent \u00e0 eux m\u00eame : </p> <ul> <li><code>abcd</code> : Correspond \u00e0 \"abcd\".</li> </ul> <p>Il y a plusieurs m\u00e9tacaract\u00e8res ayant des effets particuliers: </p> <ul> <li><code>.</code> : Correspond \u00e0 n'importe quel caract\u00e8re sauf un saut de ligne.</li> <li><code>^</code> : D\u00e9but de la ligne.</li> <li><code>$</code> : Fin de la ligne.</li> <li><code>*</code> : Correspond \u00e0 0 ou plusieurs r\u00e9p\u00e9titions du caract\u00e8re pr\u00e9c\u00e9dent. <code>.*</code> permet donc de matcher n'importe quel s\u00e9rie de caract\u00e8res.</li> <li><code>[]</code> : D\u00e9finit une classe de caract\u00e8res. <code>[abc]</code> correspond \u00e0 \"a\", \"b\" ou \"c\". On peut aussi matcher une plage de caract\u00e8res. <code>[a-z]</code> correspond \u00e0 tout les lettres de l'alphabet en minuscule.</li> <li><code>[^]</code> : D\u00e9finit une classe de caract\u00e8res. <code>[^abc]</code> correspond \u00e0 ce qui n'est pas \"a\", \"b\" ou \"c\".</li> <li><code>{n,m}</code> : Correspond entre n et m r\u00e9p\u00e9titions de l'\u00e9l\u00e9ment pr\u00e9c\u00e9dent. En BRE il faut noter <code>\\{n,m\\}</code>.</li> <li><code>()</code>: D\u00e9fini une sous-expression. Cette expression peut \u00eatre rappel\u00e9e plus tard avec <code>\\n</code>. En BRE il faut \u00e9crire <code>\\(\\)</code>.</li> <li><code>\\n</code> : Permet de rappeler la n-ieme sous-expression. <code>\\(hello\\) world \\1</code> matchera dans son enti\u00e8ret\u00e9 \"hello world hello\".</li> </ul>"},{"location":"awk-regex/#posix-extended-regular-expressions-ere","title":"POSIX Extended Regular Expressions (ERE)","text":"<p>En ERE quasiment tout les fonctionnalit\u00e9s de BRE sont reprises, <code>{}</code> et <code>()</code> n'ont plus besoin d'\u00eatre \u00e9chap\u00e9s avec des antislash <code>\\</code> pour fonctionner. De plus <code>\\n</code> n'est plus pr\u00e9sent.</p> <p>Il y a cependant trois nouveaux m\u00e9tacaract\u00e8res :</p> <ul> <li><code>?</code> : Correspond \u00e0 0 ou une seule fois l'\u00e9l\u00e9ment pr\u00e9c\u00e9dent. <code>ab?c</code> correspondra donc avec <code>ac</code> ou <code>abc</code> par exemple.</li> <li><code>+</code> : Correspond \u00e0 minimum 1 fois l'\u00e9l\u00e9ment pr\u00e9c\u00e9dent. <code>ab+c</code> correspondra avec <code>abc</code> ou encore <code>abbbbc</code> mais pas <code>ac</code>.</li> <li><code>|</code> : OU logique. <code>abcd|efgh</code> correspond \u00e0 \"abcd\" ou \"efgh\".</li> </ul> <p>Pour utiliser des ERE sur des outils tels que <code>sed</code> et <code>grep</code> il faut rajouter l'option <code>-E</code> :</p> <pre><code>echo hello world | grep -E \"hello|bonjour|hola\"\n</code></pre> <p>En plus de ces m\u00e9tacaract\u00e8res, les BRE et les ERE supportent des classes de caract\u00e8res :</p> <ul> <li><code>[:alnum:]</code> : Caract\u00e8res alphanum\u00e9riques.</li> <li><code>[:alpha:]</code> : Caract\u00e8res alphab\u00e9tiques.</li> <li><code>[:digit:]</code> : Chiffres.</li> <li><code>[:lower:]</code> <code>[:upper:]</code> : Caract\u00e8res minucules et majuscules pour le second.</li> <li><code>[:space:]</code> : Correspond \u00e0 un espace vide, un \" \", ou encore un tab, retour \u00e0 la ligne...</li> </ul> <p>Ces classes de caract\u00e8res avec <code>grep</code> et <code>sed</code> doivent \u00eatre encadr\u00e9s de deux crochets : <code>[[:lower:]]</code>. D'autres outils comme <code>tr</code> ne n\u00e9cessitent qu'une seule paire de crochets.</p>"},{"location":"awk-regex/#gnu-vs-posix","title":"GNU vs POSIX","text":"<p>Il est important de noter que <code>grep</code> et <code>sed</code> sur la majorit\u00e9 des syst\u00e8mes Linux sont en r\u00e9alit\u00e9 <code>GNU sed</code> et <code>GNU grep</code>, qui ne sont pas exactement les m\u00eames que ceux disponibles sur FreeBSD ou MacOS, et utilisent donc GNU BRE et GNU ERE au lieu de simplement la version POSIX.</p> <p>GNU BRE et GNU ERE sont des extensions de POSIX BRE et POSIX ERE. En pratique, GNU BRE et GNU ERE fournissent les m\u00eames possibilit\u00e9s mais GNU BRE a besoin d'\u00e9chapper les m\u00e9tacaract\u00e8res seulement disponibles dans POSIX ERE.</p> <p>Les op\u00e9rateurs apport\u00e9s par GNU BRE/ERE permettent de d\u00e9finir notamment les bords d'un mot :</p> <ul> <li><code>\\b</code> et <code>\\B</code> : Permet de correspondre le d\u00e9but OU la fin d'un mot. Et pour <code>\\B</code> de ne pas correspondre le d\u00e9but ou la fin d'un mot. <pre><code>echo hello world | grep \"hello\\b\" # =&gt; matchera\necho helloworld | grep \"hello\\b\" # =&gt; ne matchera pas\n</code></pre></li> <li><code>\\&gt;</code> et <code>\\&lt;</code>  : Permet de correspondre seulement le d\u00e9but d'un mot pour <code>\\&lt;</code> ou seulement la fin pour <code>\\&gt;</code>.</li> </ul> <p>... sur <code>awk</code> <code>\\b</code> est reserv\u00e9 pour backspace, il faut donc utiliser <code>\\y</code> \u00e0 la place ...</p> <pre><code>echo hello world | awk '/hello\\y/' # Renverra \"hello world\"\n</code></pre> <p>GNU ERE/BRE fourni aussi des raccourcis pour les classes de regex POSIX tels que <code>\\w</code> pour les caract\u00e8res alphanum\u00e9riques (<code>\\W</code> pour la n\u00e9gation) ou encore <code>\\s</code> pour les espaces blancs comme tabulation, espace, \\r ... (<code>\\S</code> pour la n\u00e9gation).</p>"},{"location":"awk-regex/#perl-compatible-regular-expressions-pcre","title":"Perl-Compatible Regular Expressions (PCRE)","text":"<p>Perl poss\u00e8de une variante d'expression r\u00e9guli\u00e8re plus extensive que celles d\u00e9finies par POSIX. PCRE repr\u00e9sente un moteur de regex bas\u00e9 initialement sur la syntaxe Perl et \u00e9crit en C qui permet d'impl\u00e9menter cette variante de regex dans divers outils. La syntaxe du langage Perl et du PCRE sont tr\u00e8s proches mais pas exactement similaires. </p> <p>La force et flexibilit\u00e9 de cette syntaxe a pouss\u00e9 le PCRE a devenir un standard parmis les langages de programmation. Ainsi Python, Ruby, Java, .NET, JavaScript utilisent tous des pr\u00e8s ou de loin la syntaxe PCRE. Certains langages tels que PHP ou R utilisent m\u00eame directement le moteur PCRE.</p> <p>La syntaxe PCRE r\u00e9cup\u00e8re la syntaxe GNU ERE et y rajoute des fonctionnalit\u00e9s :</p> <ul> <li><code>\\d</code> : Correspond \u00e0 un chiffre (0-9).</li> <li><code>\\D</code> : Correspond \u00e0 un caract\u00e8re non num\u00e9rique.</li> <li><code>\\w</code> : Correspond \u00e0 un caract\u00e8re alphanum\u00e9rique (lettres, chiffres, et underscore).</li> <li><code>\\W</code> : Correspond \u00e0 un caract\u00e8re non-alphanum\u00e9rique.</li> <li><code>\\s</code> : Correspond \u00e0 un caract\u00e8re espace blanc (tab, espace, saut de ligne ...).</li> <li><code>\\S</code> : Correspond \u00e0 un caract\u00e8re non-espace blanc.</li> </ul> <p>Et bien d'autres ... Sp\u00e9cification PCRE</p> <p></p> <p>Licence Regex</p>"},{"location":"awk-regex/#exemples-pratiques","title":"Exemples Pratiques","text":"<ul> <li> <p><code>hello</code> : Correspond \u00e0 la cha\u00eene \"hello\".</p> </li> <li> <p><code>\\d{3}</code> : Correspond \u00e0 exactement trois chiffres.</p> </li> <li> <p><code>\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b</code> : Correspond (\u00e0 peu pr\u00e8s) \u00e0 une adresse email.</p> </li> </ul>"},{"location":"awk-regex/#expression-regulieres-sur-python-et-contournement","title":"Expression r\u00e9guli\u00e8res sur Python et contournement","text":"<p>En Python, vous pouvez utiliser des regex pour rechercher, d\u00e9couper, remplacer  des motifs dans une cha\u00eene gr\u00e2ce au module <code>re</code>.</p> <pre><code>import re\n\ntext = \"Contactez nous \u00e0 support@example.com ou contact@example.com ou thierry.amettler@proton.me\"\nemails = re.findall(r'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b', text)\nprint(emails)\n</code></pre> <p>Python utilise une variante proche de la syntaxe PCRE.</p> <p>Python \u00e9tant un langage de programmation g\u00e9n\u00e9ral il peut \u00eatre judicieux de combiner des Regex avec, par exemple, des conditions <code>if</code>, des variables ou encore des m\u00e9thodes sur les strings. Cela permet potentiellement de simplifier la lecture du code qui peut vite \u00eatre peu lisible avec seulement des regex.</p> <pre><code>text = \"Contact us at support@example.com or sales@example.com or thierry.amettler@proton.me\"\n\ndef is_email(word):\n    if \"@\" in word and \".\" in word:\n        local, domain = word.split(\"@\")\n        if \".\" in domain and len(domain.split(\".\")[-1]) &gt; 1:\n            return True\n    return False\n\n\n# Extraire les mots qui sont des adresses email\nwords = text.split()\nemails = [word for word in words if is_email(word)]\nprint(emails)\n</code></pre>"},{"location":"modularite/","title":"Modularit\u00e9","text":""},{"location":"modularite/#python-modules","title":"Python modules","text":"<p>En Python, un module est un fichier contenant du code Python, comme des fonctions, des classes et des variables, qui peuvent \u00eatre import\u00e9es et utilis\u00e9es dans d'autres fichiers Python. Les modules permettent de structurer un programme Python en s\u00e9parant le code en morceaux logiques, facilitant ainsi la r\u00e9utilisation et l'organisation.</p> <p>L'\u00e9cosyst\u00e8me Python poss\u00e8de des milliers de modules externes entretenus par la communaut\u00e9 permettant de faciliter le d\u00e9veloppement de n'importe quel programme. Cette diversit\u00e9 de modules est l'une des plus grande force de Python.</p>"},{"location":"modularite/#types-de-modules","title":"Types de Modules","text":"<ol> <li> <p>Modules int\u00e9gr\u00e9s : Ces modules font partie de l'installation standard de Python et n'ont pas besoin d'\u00eatre install\u00e9s s\u00e9par\u00e9ment. Exemples : <code>math</code>, <code>sys</code>, <code>os</code>.</p> </li> <li> <p>Modules tiers : Ce sont des modules cr\u00e9\u00e9s par la communaut\u00e9 Python et disponibles via le Python Package Index (PyPI). Ils doivent \u00eatre install\u00e9s avec des outils comme <code>pip</code>. Exemples : <code>requests</code>, <code>numpy</code>, <code>pandas</code>.</p> </li> <li> <p>Modules personnalis\u00e9s : Ce sont des modules que vous cr\u00e9ez vous-m\u00eame pour organiser votre propre code.</p> </li> </ol>"},{"location":"modularite/#creation-dun-module","title":"Cr\u00e9ation d'un Module","text":"<p>Un module en Python est simplement un fichier Python (.py). Par exemple, un fichier <code>mymodule.py</code> pourrait contenir :</p> <pre><code># mymodule.py\ndef saluer(nom):\n    return f\"Bonjour, {nom}!\"\n\ndef addition(a, b):\n    return a + b\n</code></pre>"},{"location":"modularite/#utilisation-des-modules","title":"Utilisation des Modules","text":""},{"location":"modularite/#importation-de-modules","title":"Importation de Modules","text":"<p>Pour utiliser un module, vous devez d'abord l'importer dans votre script Python. Il existe plusieurs fa\u00e7ons de le faire :</p> <ul> <li>Importation compl\u00e8te :</li> </ul> <pre><code>import mymodule\n\nprint(mymodule.saluer(\"Alice\"))\n</code></pre> <ul> <li>Importation avec un alias :</li> </ul> <pre><code>import mymodule as mm\n\nprint(mm.saluer(\"Bob\"))\n</code></pre> <ul> <li>Importation de fonctions sp\u00e9cifiques :</li> </ul> <pre><code>from mymodule import saluer, addition\n\nprint(saluer(\"Charlie\"))\n</code></pre> <ul> <li>Importation de toutes les fonctions (non recommand\u00e9) :</li> </ul> <pre><code>from mymodule import *\n\nprint(saluer(\"Diana\"))\n</code></pre> <p>Cette m\u00e9thode n'est pas recommand\u00e9e car elle peut porter \u00e0 confusion la provenance d'une fonction. Cela rend le code peut lisible.</p>"},{"location":"modularite/#chemin-dacces-aux-modules","title":"Chemin d'acc\u00e8s aux Modules","text":"<p>Python va d'abord chercher le module dans les modules builtins, list\u00e9s dans <code>sys.builtin_module_names</code>. Si il ne le trouve pas dans cette liste il va chercher le fichier .py du module recherch\u00e9 dans les dossiers list\u00e9s par <code>sys.path</code>.</p> <p>Cette liste contient les dossiers d'installation de modules externes mais aussi le dossier actuel (pour une ex\u00e9cution int\u00e9ractive) ou le dossier du script .py appel\u00e9.</p>"},{"location":"modularite/#pip-le-gestionnaire-de-paquets-de-python","title":"pip : Le Gestionnaire de Paquets de Python","text":"<p>pip est l'outil officiel et le plus couramment utilis\u00e9 pour installer et g\u00e9rer les packages Python. Il permet aux d\u00e9veloppeurs de rechercher, installer, mettre \u00e0 jour et d\u00e9sinstaller des packages disponibles dans le Python Package Index (PyPI).</p> <p><code>pip</code> est g\u00e9n\u00e9ralement install\u00e9 par d\u00e9faut avec Python.</p>"},{"location":"modularite/#utilisation-de-base","title":"Utilisation de base","text":"<p>Pour installer, d\u00e9sinstaller ou mettre \u00e0 jour un package :</p> <pre><code>pip install nom_du_package\npip uninstall nom_du_package\npip install --upgrade nom_du_package\n</code></pre> <p>Pour voir tous les packages install\u00e9s dans votre environnement Python, utilisez la commande pip list :</p> <p><pre><code>pip list\n</code></pre> <code>pip search</code> permet de rechercher un package, mais il est souvent plus judicieux d'aller les chercher directement sur PyPI.</p>"},{"location":"modularite/#fichier-requirements","title":"Fichier Requirements","text":"<p><code>pip</code> permet \u00e9galement d'installer des packages \u00e0 partir d'un fichier de d\u00e9pendances (g\u00e9n\u00e9ralement nomm\u00e9 requirements.txt). Ce fichier liste les packages n\u00e9cessaires \u00e0 un projet.</p> <pre><code># Exemple de fichier requirements.txt\nrequests==2.25.1\nnumpy&gt;=1.19.5\npandas\n</code></pre> <p>Pour installer les modules depuis ce fichier on peut faire :</p> <pre><code>pip install -r requirements.txt\n</code></pre> <p>On peut utiliser <code>pip freeze</code> pour lister tout les modules install\u00e9s et leur version et donc g\u00e9n\u00e9rer ce fichier : <pre><code>pip freeze &gt; requirements.txt\n</code></pre></p>"},{"location":"modularite/#les-environnements-virtuels-venv","title":"Les environnements virtuels (venv)","text":""},{"location":"modularite/#le-probleme-de-pip-seul","title":"Le probl\u00e8me de <code>pip</code> seul","text":"<p>Lorsque l'on installe un paquet avec <code>pip</code> celui-ci se retrouvera install\u00e9 de mani\u00e8re globale sur le syst\u00e8me. Cela peut vite \u00eatre probl\u00e9matique d'un point de vue gestion des d\u00e9pendances : </p> <ul> <li>Deux projets pourraient utiliser le m\u00eame module mais dans des versions diff\u00e9rentes ce qui g\u00e9n\u00e8rera des conflits.</li> <li><code>pip freeze</code> va r\u00e9cup\u00e9rer les modules d'autres projets et mettre dans le <code>requirements.txt</code> des modules non voulus.</li> <li>Toucher \u00e0 l'installation de modules Python globaux sur Linux peut entrainer des comportements non-pr\u00e9visibles \u00e9tant donn\u00e9 que Python est utilis\u00e9 direcement par l'OS (exemple : Qtile)</li> <li>On a plut\u00f4t envie de g\u00e9rer les modules Python install\u00e9s globalement directement via le package manager de la distribution pour s'assurer de ne pas avoir de conflits \u00e0 l'\u00e9chelle de l'OS et pour garder une uniformit\u00e9 des m\u00e9thodes de maintenance du syst\u00e8me.</li> </ul> <p>Les deux derniers points sont tellement importants que sur certaines distributions (Archlinux par exemple), il n'est par d\u00e9faut m\u00eame pas possible d'installer directement avec <code>pip</code> des paquets.</p>"},{"location":"modularite/#la-solution-les-environnements-virtuels","title":"La solution : les environnements virtuels","text":"<p>Toutes ces raisons poussent \u00e0 vouloir un syst\u00e8me qui permet d'isoler les projets les uns des autres et les isoler aussi du syst\u00e8me. Pour cela on utilise des environnements virtuels (venvs).</p> <p>Python fourni la fonctionnalit\u00e9 par d\u00e9faut, il n'y a pas besoin de solutions externes qui peuvent amener leur propre lot de probl\u00e8mes.</p> <p>Pour cr\u00e9er un environnement virtuel il suffit d'\u00eatre positionn\u00e9 dans le dossier du projet et faire :  <pre><code>python -m venv venv\n</code></pre></p> <p><code>-m</code> permet de dire qu'on va appeler un module python, module d\u00e9nomm\u00e9 <code>venv</code>, ce module appel\u00e9 tel quel attends le nom de l'environnement virtuel \u00e0 cr\u00e9er, nom qui ici est aussi <code>venv</code> (mais aurait pu \u00eatre autre chose).</p> <p>La commande va g\u00e9n\u00e9rer un dossier du nom du venv (ici simplement <code>venv</code>) et va le remplir de tout le n\u00e9cessaire pour avoir un Python isol\u00e9, notamment copier le binaire en lui m\u00eame de python, fournir des m\u00e9thodes pour activer et d\u00e9sactiver le venv et des dossiers d'installations des modules. Cela reste suffisamment l\u00e9ger (16Mo pour un venv vierge).</p> <p>En faisant un <code>pip freeze</code> avant et apr\u00e8s activation du venv on peut comparer les modules disponibles. Avant le <code>pip freeze</code> renverra une longue liste de modules tandis que sur un venv vierge il n'y aura rien.</p> <p>Pour activer l'environnement virtuel dans le Shell actuel, et donc dire au shell que <code>python</code> doit pointer vers le venv il faut sourcer le script d'activation, et pour d\u00e9sactiver simplement faire <code>deactivate</code>.</p> <pre><code># En \u00e9tant dans le dossier du projet o\u00f9 le dossier venv se situe\nsource ./venv/bin/activate\n\n# Pour d\u00e9sactiver le venv\ndeactivate\n</code></pre> <p>Il faut ainsi penser \u00e0 le r\u00e9activer \u00e0 chaque nouveau Shell.  Des \u00e9diteurs de texte comme Visual Studio Code permettent de s'occuper de la gestion des venvs et de leur activation aussi.</p>"},{"location":"modularite/#un-mot-sur-dautres-solutions","title":"Un mot sur d'autres solutions","text":"<p>Il existe de multiples autres solutions pour r\u00e9soudre ce probl\u00e8me, certaines tr\u00e8s connues et apportant bien d'autres fonctionnalit\u00e9s comme <code>conda</code>. Cependant je d\u00e9conseille fortement leur utilisation pour un n\u00e9ophyte du langage, encore plus dans le cadre d'administration de syst\u00e8me Unix, o\u00f9 l'installation de logiciels externes est souvent limit\u00e9e sur les serveurs.</p> <ul> <li>Ces outils ne sont pas universels et ne seront pas forc\u00e9ment disponibles dans tout les \u00e9cosyst\u00e8mes professionels.</li> <li>Ces outils rajoutent souvent beaucoup de fonctionnalit\u00e9s qui peuvent rendre confus les n\u00e9ophytes.</li> <li>Ces outils ne sont pas install\u00e9s par d\u00e9faut avec Python sur toutes les machines Linux r\u00e9centes.</li> <li>Ces outils rajoutent trop d'asbstraction et emp\u00eachent de comprendre les tenants et aboutissants de certaines choses, tels que l'int\u00e9r\u00eat des venvs.</li> </ul> <p>Je recommande ainsi d'utiliser simplement des venvs Python classique, et qu'une fois habitu\u00e9, si le besoin s'en fait sentir, aller chercher un de ces outils en ayant un besoin pr\u00e9cis en t\u00eate o\u00f9 les venvs classiques ne suffisent pas.</p>"},{"location":"modularite/#une-courte-liste-de-modules-python-connus","title":"Une courte liste de modules Python connus","text":""},{"location":"modularite/#siences","title":"Siences","text":"<ol> <li>NumPy - Calcul scientifique et manipulation de tableaux multidimensionnels.</li> <li>Pandas - Analyse de donn\u00e9es et manipulation de structures de donn\u00e9es.</li> <li>Matplotlib - Visualisation de donn\u00e9es avec des graphiques 2D.</li> <li>Seaborn - Visualisation statistique bas\u00e9e sur Matplotlib.</li> <li>SciPy - Calcul scientifique avanc\u00e9, incluant l'optimisation et les statistiques.</li> </ol>"},{"location":"modularite/#machine-learning","title":"Machine learning","text":"<ol> <li>scikit-learn - Apprentissage automatique et data mining.</li> <li>TensorFlow - Apprentissage automatique et r\u00e9seaux de neurones.</li> <li>Keras - Interface de haut niveau pour TensorFlow, simplifiant la construction de mod\u00e8les de deep learning.</li> <li>PyTorch - Biblioth\u00e8que de deep learning d\u00e9velopp\u00e9e par Facebook.</li> <li>NLTK - Traitement du langage naturel.</li> </ol>"},{"location":"modularite/#web","title":"Web","text":"<ol> <li>Requests - Requ\u00eates HTTP simples.</li> <li>BeautifulSoup - Analyse et extraction de donn\u00e9es \u00e0 partir de documents HTML et XML.</li> <li>Flask - Micro-framework web l\u00e9ger.</li> <li>Django - Framework web complet pour le d\u00e9veloppement rapide de sites web.</li> </ol>"},{"location":"modularite/#traitement-dimage","title":"Traitement d'image","text":"<ol> <li>Pillow - Manipulation et traitement d'images.</li> <li>OpenCV - Vision par ordinateur et traitement d'images.</li> </ol>"},{"location":"modularite/#automatisation","title":"Automatisation","text":"<ol> <li>Selenium - Automatisation de navigateurs pour les tests web.</li> <li>Scrapy - Framework de scraping web rapide et hautement extensible.</li> <li>paramiko - Connexions SSH via Python.</li> </ol>"},{"location":"parallelisme/","title":"La programmation parall\u00e8le en Shell, Perl, Python et Ruby","text":""},{"location":"parallelisme/#differentes-types-de-concurrence","title":"Diff\u00e9rentes types de concurrence","text":"<p>La concurrence (concurrency) en programmation d\u00e9signe la capacit\u00e9 d'un syst\u00e8me \u00e0 g\u00e9rer plusieurs t\u00e2ches ou processus en m\u00eame temps, ce qui am\u00e9liore l'efficacit\u00e9 et la r\u00e9activit\u00e9. Cela ne veut pas n\u00e9cessairement dire que les t\u00e2ches s'\u00e9x\u00e9cutent exactement en m\u00eame temps, juste que ces t\u00e2ches existent en m\u00eame temps. Le parall\u00e9lisme quant \u00e0 lui d\u00e9signe l'\u00e9x\u00e9cution simultann\u00e9e de plusieurs t\u00e2ches, notamment gr\u00e2ce \u00e0 des processeurs multicoeurs.</p> <p>Le parall\u00e9lisme est donc une sous cat\u00e9gorie de concurrence mais n\u00e9cessite un processeur multicoeurs.</p> <p>Une mani\u00e8re de faire de la concurrence sans faire du parall\u00e9lisme est de faire de la programmation asynchrone. En programmation asynchrone une t\u00e2che sera non bloquante et permettra donc de passer \u00e0 l'\u00e9tape suivante, contrairement \u00e0 la programmation classique (synchrone) o\u00f9 une t\u00e2che est bloquante tant qu'elle n'est pas finie. Ceci est utile lorsque la t\u00e2che en question ne n\u00e9cessite aucune actions du processeur.</p> <p>On peut imaginer une commande <code>sleep 10</code> qui attendra 10 secondes et bloquera le programme, pendant ces 10 secondes le processeur ne fera rien, c'est donc du temps perdu. Ainsi on peut lancer ce <code>sleep 10</code>, le passer \"en arri\u00e8re plan\", faire d'autres t\u00e2ches puis attendre si n\u00e9cessaire que ce <code>sleep 10</code> finisse. </p> <p>Les impl\u00e9mentations exactes des m\u00e9thodes de concurrence varient grandement d'un langage \u00e0 un notre.</p>"},{"location":"parallelisme/#concurrence-sur-bash","title":"Concurrence sur Bash","text":"<p>Le shell Unix \u00e9tant bien plus proche du syst\u00e8me Linux la gestion de la concurrence est quasiment directement celle du kernel Linux.  Un processus poss\u00e8de minimum un thread mais peut en poss\u00e9der plus.</p> <p>Quand un coeur du processeur est libre, le syst\u00e8me choisi un thread en attente de traitement et s'en occupe. Apr\u00e8s un certain temps ce thread peut \u00eatre remis en attente et/ou d\u00e9placer vers un autre coeur pour optimiser le syst\u00e8me, mais ce n'est pas quelque chose \u00e0 prendre en compte en tant que d\u00e9veloppeurs.</p> <p>Ainsi, faire du multiprocessing en Bash revient \u00e0 lancer plusieurs processus et laisser Linux s'en occuper. On ne peut pas faire du multithreading en Bash.</p>"},{"location":"parallelisme/#processus-en-arriere-plan","title":"Processus en arri\u00e8re plan","text":"<p>Il existe de multiples mani\u00e8res de faire du multiprocessing, l'une des mani\u00e8res les plus basiques est d'utiliser <code>&amp;</code> qui permet de passer une commande en arri\u00e8re plan et la rendre non bloquante.</p> <pre><code>sleep 10 &amp;\necho Hello\n</code></pre> <p>Parfois on veut attendre que tout les jobs en arri\u00e8re plan soient finis avant de continuer, ceci peut \u00eatre fait avec la commande <code>wait</code>. </p> <pre><code>sleep 10&amp;\nsleep 10&amp;\necho Waiting !\nwait\necho Fin !\n</code></pre> <p>On peut aussi lister les jobs en arri\u00e8re plan avec <code>jobs</code> et remettre un job au premier plan avec <code>fg</code> (pour foreground).</p> <p>Parfois on se rends compte qu'une commande est longue \u00e0 s'\u00e9x\u00e9cuter et on aurait aim\u00e9 la mettre en arri\u00e8re plan. C'est possible via la combinaison de <code>CTRL+Z</code> suivi de la commande <code>bg</code> (pour background). <code>CTRL+Z</code> permet de suspendre un job et rendre la main dans le shell et <code>bg</code> permet d'arr\u00eater la suspension et de continuer l'ex\u00e9cution du processus.</p> <pre><code>sleep 10 &amp;\njobs # Affichera le processus sleep en arri\u00e8re plan\nfg  # Renverra le shell dans le process sleep\n*CTRL+Z* # Suspend et rend la main\nbg # Continue l'\u00e9x\u00e9cution en arri\u00e8re plan\n</code></pre>"},{"location":"parallelisme/#pipes","title":"Pipes","text":"<p>L'utilisation de pipes sur Linux est, nativement, du multiprocessing. Tout les processus d'une s\u00e9rie de pipes sont lanc\u00e9s en m\u00eame temps au d\u00e9but. La plupart des commandes Linux traitent ligne par ligne et renvoient ligne par ligne les donn\u00e9es, ce qui permet une ex\u00e9cution concurrente de la plupart des commandes.</p> <p>Ainsi, le temps d'ex\u00e9cution d'une s\u00e9rie de pipes est le temps d'\u00e9x\u00e9cution du processus le plus long du lot, et non la somme de tout les temps.</p> <pre><code>sleep 10 | sleep 10\n# Ne prendra que 10 secondes pour s'ex\u00e9cuter\n</code></pre>"},{"location":"parallelisme/#xargs","title":"Xargs","text":"<p><code>xargs</code> est une commande Unix puissante permettant la manipulation d'arguments. Cette commande perment notamment de r\u00e9cup\u00e9rer puis grouper ou d\u00e9grouper des arguments et de les placer o\u00f9 on veut dans une commande \u00e0 ex\u00e9cuter.</p> <p>Exemple simple :</p> <pre><code>\u276fseq 6 | xargs -n 2\n1 2\n3 4\n5 6\n</code></pre> <p>Par d\u00e9faut si aucune commande n'est fournis, <code>xargs</code> fera un <code>echo</code> des arguments. Sinon <code>xargs</code> les rajoutera \u00e0 la fin de la commande. Le <code>-n 2</code> permet de pr\u00e9ciser de grouper 2 par 2 les arguments.</p> <p>On peut utiliser <code>-I {}</code> pour placer o\u00f9 on veut les arguments et pas seulement \u00e0 la fin.</p> <pre><code>\u276fseq 3 | xargs -I {} echo \"L'argument de valeur {} est au milieu du texte\"\nL'argument de valeur 1 est au milieu du texte\nL'argument de valeur 2 est au milieu du texte\nL'argument de valeur 3 est au milieu du texte\n</code></pre> <p>Dans l'\u00e9tat <code>xargs</code> est tr\u00e8s pratique, cependant une autre force de xargs et la possibilit\u00e9 de facilement faire du multiprocessing. En effet il suffit de rajouter simplement <code>-P N</code> avec <code>N</code> le nombre de processus. <pre><code>seq 3 | xargs -P 3 -I {} echo \"L'argument de valeur {} est au milieu du texte\"\n</code></pre></p> <p>Ici, il y aura 3 processus, un pour chaque ex\u00e9cution de <code>echo</code>. On peut aussi mettre <code>N=0</code> pour utiliser le maximum possible de processus automatiquement.</p>"},{"location":"parallelisme/#exercice","title":"Exercice","text":"<p>Utilisez de la concurrence pour optimiser le ping d'IPs allant de 192.168.1.1 \u00e0 192.168.1.254.</p> Exemples de solutions <pre><code> for i in {1..254}\n    do\n    (ping -c 1 192.168.1.$i &gt; /dev/null &amp;&amp; echo \"192.168.1.$i\") &amp;\n    done\n</code></pre> <pre><code>echo 192.168.1.{1..254} | xargs -n 1 -P 0 ping -c 1 | grep -B 1 \"1 re\u00e7us\" | grep stat\n</code></pre> <pre><code>echo 192.168.1.{1..254} | xargs -n 1 -P 0 ping -c 1 | awk '/1 re\u00e7us/ {print prev} {prev=$0}'\n</code></pre>"},{"location":"parallelisme/#python","title":"Python","text":"<p>Il existe sur Python trois mani\u00e8res principales de faire de la programmation concurrentielle, via les modules <code>threading</code>, <code>asyncio</code> et <code>multiprocessing</code>. Les trois permettent de la concurrence mais il y a des subtilit\u00e9s entre elles.</p> <p>On peut mesurer le temps d'ex\u00e9cution de fonctions gr\u00e2ce au module <code>time</code> et sa fonction <code>time()</code>. C'est essentiel de mesurer lorsque l'on cherche \u00e0 optimiser des temps d'ex\u00e9cution.</p> <pre><code>import time\n\nn = 100000000\n\ndef carre(debut, fin):\n    for i in range(debut, fin):\n        k = i**2\n        del k\n\nt1 = time.time()\ncarre(0, n)\nt2 = time.time()\n\nprint('Time taken in seconds -', t2 - t1)\n</code></pre> <p>Ce code permet de mesurer le temps d'ex\u00e9cution du calcul de chaque carr\u00e9 entre 0 et 100000000-1. Il prend 4.8s \u00e0 s'ex\u00e9cuter sur mon syst\u00e8me.</p>"},{"location":"parallelisme/#threading","title":"threading","text":"<p>La librairie <code>threading</code> permet le multithreading dans Python. Cependant \u00e0 cause de la mani\u00e8re dont Python est implement\u00e9 il ne peut y avoir qu'un seul thread qui a le controle (lock) de l'interpr\u00e9teur Python \u00e0 un instant <code>t</code>. Cela est caus\u00e9 par le Pytho Global Interpreter Lock ou encore GIL.</p> <p>Ainsi une application Python utilisant <code>threading</code> et deux threads ne sera pas toujours plus rapide qu'avec un seul. Les t\u00e2ches CPU-bound ne verront pas de gain car le GIL bloquera l'ex\u00e9cution des threads en m\u00eame temps sur le CPU.  En revanche les t\u00e2ches I/O-bound pourront voir des gains significatifs car la t\u00e2che n'est pas limit\u00e9e par le CPU, mais autre chose, par exemple la r\u00e9ponse d'un serveur distant \u00e0 un ping, ou de l'\u00e9criture disque. </p> <pre><code>import threading\nimport time\n\nn = 100000000\n\ndef carre(deb_fin):\n    debut = deb_fin[0]\n    fin = deb_fin[1]\n    for i in range(debut, fin):\n        k = i**2\n        del k\n\n\nthread1 = threading.Thread(target=carre, args=((0, n // 2),))  # S'occupera de la moiti\u00e9 des carr\u00e9s\nthread2 = threading.Thread(target=carre, args=((n // 2, n),))  # Et ce thread de l'autre moiti\u00e9\n\nt1 = time.time()\n\nthread1.start()\nthread2.start()\nthread1.join()\nthread2.join()\n\nt2 = time.time()\n\n\nprint('Time taken in seconds -', t2 - t1)\n</code></pre> <p>Cette version du code pr\u00e9c\u00e9dent prends 4.9s \u00e0 s'ex\u00e9cuter malgr\u00e9 qu'il y ait deux threads faisant les calculs.</p> <p>Pour utiliser <code>threading</code>, une mani\u00e8re simple est de d\u00e9finir chaque threads avec <code>threading.Thread</code> en rajoutant comme argument la t\u00e2che \u00e0 effectuer avec ses arguments. Juste d\u00e9finir un objet <code>Thread</code> ne l'ex\u00e9cute pas. Il faut utiliser la m\u00e9thode <code>.start()</code> sur l'objet pour le lancer.</p> <p>La m\u00e9thode <code>.join()</code> permet de bloquer l'avanc\u00e9e dans le script jusqu'\u00e0 ce que les threads aient fini de s'ex\u00e9cuter.</p> <p>Malgr\u00e9 les r\u00e9sultats peu engageants <code>threading</code> peut gagner du temps lorsque ce n'est pas le CPU qui limite, par exemple si l'on fait de multiples ping et que l'on attends la r\u00e9ponse des serveurs.</p>"},{"location":"parallelisme/#multiprocessing","title":"multiprocessing","text":"<p>Lorsque l'on veut donc acc\u00e9l\u00e9rer une t\u00e2che limit\u00e9e par le CPU on peut utiliser la librairie <code>multiprocessing</code> qui permet la cr\u00e9ation de diff\u00e9rents processus qui iront sur des coeurs diff\u00e9rents.</p> <pre><code>import time\nimport multiprocessing\n\nn = 100000000\n\n\ndef carre(deb_fin):\n    debut = deb_fin[0]\n    fin = deb_fin[1]\n    for i in range(debut, fin):\n        k = i**2\n        del k\n\n\nt1 = time.time()\n\nwith multiprocessing.Pool() as pool:\n    pool.map(carre, [(0, n // 2), (n // 2, n)])\n\nt2 = time.time()\n\nprint('Time taken in seconds -', t2 - t1)\n</code></pre> <p>Pour faire fonctionner <code>multiprocessing</code> on peut d\u00e9finir un objet <code>Pool</code> et y maper une fonction et une liste d'arguments, la librairie s'occupera d'appliquer ces arguments \u00e0 la fonction et d'ex\u00e9cuter ceci dans des processus diff\u00e9rents. Le temps d'ex\u00e9cution est ici quasiment deux fois plus rapide. </p> <p>Cependant il est important de noter que cr\u00e9er un processus est une t\u00e2che prenant un peu de temps, il est donc peu judicieux d'utiliser du multiprocessing lorsqu'il y a des milliers et des milliers de t\u00e2ches n'\u00e9tant pas limit\u00e9es par le CPU par exemple. </p> <p>De plus la communication entre les processus est plus compliqu\u00e9e que la communication inter-threads de <code>threading</code>.</p>"},{"location":"parallelisme/#utiliser-la-concurrence-du-shell-avec-des-scripts-python","title":"Utiliser la concurrence du Shell avec des scripts Python","text":"<p>La concurrence en Shell s'appliquant sur toute commande et peut donc aussi s'appliquer sur des scripts Python. On peut reprendre le code pr\u00e9c\u00e9dent et l'adapter pour prendre les arguments en ligne de commande avec <code>sys.argv</code>, ce qui nous permettra d'appeler le script notamment avec du multiprocessing via <code>xargs</code>.</p> <pre><code>#!python\nimport sys\nimport time\n\ndeb_fin = (int(sys.argv[1]), int(sys.argv[2]))\n\ndef carre(deb_fin):\n    debut = deb_fin[0]\n    fin = deb_fin[1]\n    for i in range(debut, fin):\n        k = i**2\n        del k\n\n\nt1 = time.time()\ncarre(deb_fin)\nt2 = time.time()\n\nprint('Time taken in seconds -', t2 - t1)\n</code></pre> <pre><code># Multiprocessing sur 2 coeurs du script.\necho 0 50000000 50000000 100000000 | xargs -P 2 -n 2 python script.py\n</code></pre>"},{"location":"perl-ruby/","title":"Pr\u00e9sentation de Perl et Ruby","text":""},{"location":"perl-ruby/#perl","title":"Perl","text":""},{"location":"perl-ruby/#introduction","title":"Introduction","text":"<p>Perl est un langage de programmation dynamique et interpr\u00e9t\u00e9, cr\u00e9\u00e9 par Larry Wall en 1987. Il est particuli\u00e8rement bien adapt\u00e9 \u00e0 la manipulation de texte et \u00e0 l'extraction de donn\u00e9es, ce qui le pousse \u00e0 \u00eatre assez ad\u00e9quat pour de l'admistration de syst\u00e8me Unix, ceci \u00e9tant fortement bas\u00e9s sur la manipulation de texte.</p> <p>Cependant Perl est de moins en moins utilis\u00e9 de nos jours, selon le dernier sondage Stackoverflow Perl est \u00e0 2.5% d'utilisation parmis les d\u00e9veloppeurs ayant r\u00e9pondus. Ce nombre est \u00e0 mettre face \u00e0 celui de Python qui est de 51%.</p> <p>La plupart des interactions avec ce langage ce font via la maintenance de vieux scripts et outils legacy. Il est suffisamment lisible pour qu'une personne \u00e9tant habitu\u00e9 \u00e0 un autre langage de scripting g\u00e9n\u00e9raliste comme Python puisse en lire sans trop de probl\u00e8mes.</p> <p>Son principal avantage vient de la puissance et flexibilit\u00e9 de ses Regex, cependant la plupart des autres outils utilisent d\u00e9sormais la m\u00eame syntaxe d'expression r\u00e9guli\u00e8res.</p>"},{"location":"perl-ruby/#exemple-de-code","title":"Exemple de Code","text":"<pre><code>#!/usr/bin/perl\nuse strict;\nuse warnings;\n\n# Exemple de script Perl\nprint \"Bonjour, monde!\\n\";\n\n# Manipulation de texte\nmy $texte = \"Perl est puissant.\";\n$texte =~ s/p2uiss/puiss/i;  # Remplacement de texte avec regex\nprint \"$texte\\n\";\n\n# Cr\u00e9ation et \u00e9criture dans un fichier\nopen(my $fh, '&gt;', 'exemple.txt') or die \"Impossible de cr\u00e9er le fichier: $!\";\nprint $fh \"Ceci est une ligne de texte.\\n\";\nclose($fh);\n</code></pre>"},{"location":"perl-ruby/#utilisations-courantes","title":"Utilisations Courantes","text":"<ul> <li>Traitement de texte et extraction de donn\u00e9es</li> <li>Scripts d'administration syst\u00e8me</li> </ul>"},{"location":"perl-ruby/#ruby","title":"Ruby","text":""},{"location":"perl-ruby/#introduction_1","title":"Introduction","text":"<p>Ruby est un langage de programmation dynamique et interpr\u00e9t\u00e9, cr\u00e9\u00e9 par Yukihiro \"Matz\" Matsumoto et publi\u00e9 pour la premi\u00e8re fois en 1995. Ruby est con\u00e7u pour \u00eatre simple \u00e0 utiliser et productif, en mettant l'accent sur l'\u00e9l\u00e9gance et la lisibilit\u00e9 du code.</p> <p>Ruby, tout comme Perl, est assez peu utilis\u00e9 avec 5% des utilisateurs de Stackoverflow l'utilisant. La plupart de ses utilisateurs ne l'utilisent pas pour de l'administration syst\u00e8me contrairement \u00e0 Perl mais plut\u00f4t pour de webdev via le framework de backend web <code>Ruby on Rails</code> utilis\u00e9 dans certain \u00e9cosyst\u00e8me.</p>"},{"location":"perl-ruby/#caracteristiques-principales","title":"Caract\u00e9ristiques Principales","text":"<ul> <li>Simplicit\u00e9 et Productivit\u00e9 : Ruby est con\u00e7u pour \u00eatre facile \u00e0 lire et \u00e0 \u00e9crire, favorisant une syntaxe naturelle et concise.</li> <li>Orient\u00e9 Objet : En Ruby, tout est objet, ce qui permet une approche unifi\u00e9e de la programmation.</li> <li>Ruby on Rails : Un framework web populaire et puissant qui a contribu\u00e9 \u00e0 la popularit\u00e9 de Ruby pour le d\u00e9veloppement web.</li> </ul>"},{"location":"perl-ruby/#exemple-de-code_1","title":"Exemple de Code","text":"<pre><code># Exemple de script Ruby\nputs \"Bonjour, monde!\"\n\n# Manipulation de texte\ntexte = \"Ruby est \u00e9l\u00e9gant.\"\ntexte.gsub!('\u00e9l\u00e9gant', 'puissant')\nputs texte\n\n# Cr\u00e9ation et \u00e9criture dans un fichier\nFile.open('exemple.txt', 'w') do |file|\n  file.puts \"Ceci est une ligne de texte.\"\nendd\n</code></pre>"},{"location":"perl-ruby/#utilisations-courantes_1","title":"Utilisations Courantes","text":"<ul> <li>D\u00e9veloppement web avec Ruby on Rails</li> </ul> <p>Bien que Perl et Ruby ne soient plus aussi populaires qu'ils l'\u00e9taient, ils restent des langages puissants avec des cas d'utilisation sp\u00e9cifiques. Perl continue d'\u00eatre utilis\u00e9 pour la maintenance d'anciens scripts, tandis que Ruby, gr\u00e2ce \u00e0 Ruby on Rails, est encore une option solide pour le d\u00e9veloppement web. Toutefois, les nouveaux projets peuvent pr\u00e9f\u00e9rer des langages plus modernes et largement adopt\u00e9s comme Python, JavaScript, ou Go.</p> <p></p>"},{"location":"python/","title":"Python - Les bases","text":""},{"location":"python/#introduction","title":"Introduction","text":"<p>Python est un langage de programmation interpr\u00e9t\u00e9 polyvalent et facile d'acc\u00e8s. Sa grande force r\u00e9side dans sa popularit\u00e9, qui lui permet d'avoir une tr\u00e8s grande communaut\u00e9 prolifique sur la production de modules externes. Python est utilis\u00e9 pour faire un peu de tout, du WebDev aux sciences en passant par l'IA il existe toujours plusieurs frameworks pour chaque cas d'usage.</p> <p>Python est donc aussi beaucoup utilis\u00e9 dans le monde de l'administration syst\u00e8me et du DevOps. Toutes les distribution Linux poss\u00e8dent Python pr\u00e9install\u00e9e.  Que ce soit pour des scripts assez simples, des utilitaires d\u00e9j\u00e0 developp\u00e9s ou encore m\u00eame du Ansible (qui est bas\u00e9 sur Python), Python domine le march\u00e9 avec Bash.</p>"},{"location":"python/#linterpreteur-python","title":"L'interpr\u00e9teur Python","text":"<p>Python est donc un langage interpr\u00e9t\u00e9, on peut lancer des scripts sans compiler au pr\u00e9alable dirctement via l'\u00e9x\u00e9cutable <code>python</code>. Si on lance l'ex\u00e9cutable sans lui fournir de commande ou de script \u00e0 ex\u00e9cuter celui ci ouvrira un shell interactif, un peu comme Bash. Ce shell Python est utile pour tester rapidement des commandes, checker une syntaxe ou faire des actions pr\u00e9cises rapidement. Mais il n'est pas r\u00e9ellement utilis\u00e9 pour de la vraie production, contrairement au shell Bash qui est beaucoup pens\u00e9 pour \u00eatre utilis\u00e9 de mani\u00e8re int\u00e9ractive.</p> <p>L'ex\u00e9cutable <code>python</code> est la plupart du temps un lien symbolique vers le vrai ex\u00e9cutable qui pr\u00e9cisera la version actuelle de Python. Cela peut \u00eatre important car certains scripts ne sont pas compatibles avec des versions ant\u00e9rieures de Python. Par exemple les <code>f-strings</code> (vues plus tard) n'ont \u00e9t\u00e9 introduites qu'\u00e0 partir de python 3.6. Les versions sont cependant r\u00e9trocompatibles, ainsi fait un script en python 3.6 sera compatible avec les versions sup\u00e9rieure \u00e0 3.6.</p> <p>Cette r\u00e9trocompatiblit\u00e9 n'est valable que pour Python 3. Les scripts Python 2.7 ne sont pas compatibles python 3, n\u00e9anmoins il est de plus en plus rare de trouver des scripts datant de cette \u00e9poque. Python 3 \u00e9tant sorti en 2008 et la derni\u00e8re version de python 2 (2.7) en 2010. Pendant une p\u00e9riode les distributions Linux fournissaient les deux versions mais de nos jours il n'y a plus que python 3 de support\u00e9, le support de python 2.7 ayant fini en 2020.</p> <pre><code>\u276f ls -l $(which python)\nlrwxrwxrwx 1 root root 7  7 juin  08:33 /usr/bin/python -&gt; python3\n\u276f ls -l $(which python3)\nlrwxrwxrwx 1 root root 10  7 juin  08:33 /usr/bin/python3 -&gt; python3.12\n\u276f ls -l $(which python3.12)\n-rwxr-xr-x 1 root root 14384  7 juin  08:33 /usr/bin/python3.12\n</code></pre> <p>On peut quitter l'interpr\u00e9teur int\u00e9ractif python avec <code>&lt;Ctrl-D&gt;</code>, <code>exit()</code> ou encore <code>quit()</code>.</p>"},{"location":"python/#gestion-des-blocs-de-code-par-indentation","title":"Gestion des blocs de code par indentation","text":"<p>En Python, l'indentation est essentielle pour d\u00e9finir la structure des blocs de code. Contrairement \u00e0 de nombreux autres langages de programmation qui utilisent des accolades <code>{}</code> ou des mots cl\u00e9s sp\u00e9cifiques pour d\u00e9limiter les blocs de code, Python utilise uniquement l'indentation.</p> <p>L'indentation d\u00e9termine la hi\u00e9rarchie des blocs de code et d\u00e9finit la port\u00e9e des structures de contr\u00f4le telles que les fonctions, les boucles, et les conditions.</p> <p>Voici un exemple avec une fonction et une condition :</p> <pre><code>def saluer(nom):\n    if nom:\n        print(\"Bonjour, {nom} !\")\n    else:\n        print(\"Bonjour, \u00e9tranger !\")\n</code></pre> <p>Dans cet exemple :     - La fonction saluer est d\u00e9finie avec def, et tout le code \u00e0 l'int\u00e9rieur de cette fonction est indent\u00e9.     - Le bloc if contient du code qui est encore plus indent\u00e9, indiquant qu'il appartient \u00e0 la condition.</p> <p>Il est recommand\u00e9 d'utiliser 4 espaces pour chaque niveau d'indentation. Les m\u00e9langes de tabulations et d'espaces ou une indentation incoh\u00e9rente entra\u00eenent des erreurs de syntaxe.</p>"},{"location":"python/#quelques-types-builtins-essentiels","title":"Quelques types builtins essentiels","text":"<p>Python, contrairement \u00e0 Bash, est un langage \"strongly typed\", c'est \u00e0 dire qu'il ne fonctionne pas juste avec des chaines de caract\u00e8res comme Bash mais avec des <code>types</code>. Ainsi tout objet poss\u00e8de un type. Un nombre entier est par exemple de type <code>int</code> (pour integer), une cha\u00eene de caract\u00e8res de type <code>str</code>. Il est important de savoir qu'en Python ces types sont d\u00e9nomm\u00e9s des classes. On peut utiliser la fonction <code>type()</code> pour voir de quel type est un objet.</p> <pre><code>type(2)\n&lt;class 'int'&gt;\ntype(\"Hello World\")\n&lt;class 'str'&gt;\n</code></pre> <p>Il y a plusieurs classes de base en Python qui viennent avec des outils de manipulation pratique de ces objets.</p>"},{"location":"python/#les-chaines-de-caracteres-str","title":"Les chaines de caract\u00e8res, <code>str</code>","text":"<p>Une cha\u00eene de caract\u00e8res de classe <code>str</code> peuvent \u00eatre cr\u00e9es de deux mani\u00e8res diff\u00e9rentes. Soit en l'\u00e9crivant directement entour\u00e9e de guillemets, soit en tentant de traduire un autre objet en <code>str</code>. <pre><code>&gt;&gt;&gt;string = \"Hello world\"\n&gt;&gt;&gt;string2 = str(2)\n</code></pre> Ici, <code>str(2)</code> permet de traduire l'<code>int 2</code> en <code>str</code> en prenant sa repr\u00e9sentation en cha\u00eene de caract\u00e8res (simplement <code>\"2\"</code>). Il n'y a pas toujours de repr\u00e9sentation possible sous forme de <code>str</code> d'un objet.</p> <p>On peut aussi d\u00e9finir des strings avec des triples guillemets ce qui permet d'\u00e9crire des cha\u00eenes de caract\u00e8res sur plusieurs lignes.</p> <pre><code>&gt;&gt;&gt;string = '''hello\nworld\n!!!\n'''\n</code></pre>"},{"location":"python/#methodes","title":"M\u00e9thodes","text":"<p>Chaque <code>str</code> (et autres objets) poss\u00e8de une liste de <code>methods</code> qui sont des fonctions applicables sur l'objet en question. <pre><code>&gt;&gt;&gt;\"hello\".capitalize()\nHello\n</code></pre></p> <p>Une liste exhaustive des m\u00e9thodes disponibles pour <code>str</code> est visible dans la documentation officielle sur les types <code>builtins</code> : M\u00e9thodes <code>str</code> On y retrouve aussi les autres <code>builtins</code> et leur documentation.</p> <p>Les <code>str</code> supportent quelques op\u00e9rations simples avec <code>+</code> et <code>*</code>. Le premier permet de concat\u00e9ner deux <code>str</code> en un et le second de r\u00e9p\u00e9ter un certain nombre de fois un <code>str</code>.</p> <pre><code>&gt;&gt;&gt;\"Ce chat est \" + \"tr\u00e8s \" *3 + \"beau.\"\n'Ce chat est tr\u00e8s tr\u00e8s tr\u00e8s beau.'\n</code></pre>"},{"location":"python/#formatage-de-str","title":"Formatage de <code>str</code>","text":"<p>Le formatage de cha\u00eenes en Python permet d'ins\u00e9rer des valeurs dans des cha\u00eenes de mani\u00e8re lisible et flexible. Il existe plusieurs m\u00e9thodes pour formater des cha\u00eenes. La syntaxe principale n\u00e9cessite de d\u00e9finir le <code>str</code> avec un <code>f</code> devant et les variables \u00e0 mettre dans le texte entre <code>{}</code>.</p> <pre><code>nom = \"Charlie\"\nage = 28\nprint(f\"Je m'appelle {nom} et j'ai {age} ans.\")  # Affiche : \"Je m'appelle Charlie et j'ai 28 ans.\"\n</code></pre> <p>Cette mani\u00e8re de faire du formatage de cha\u00eenes de charact\u00e8res est appel\u00e9e <code>F-Strings</code> est a \u00e9t\u00e9 introduite sur python 3.6. Si vous n'avez pas acc\u00e8s \u00e0 cette version ou une plus r\u00e9cente vous pouvez utiliser la m\u00e9thode <code>.format()</code>.</p> <pre><code>print(\"Je m'appelle {0} et j'ai {1} ans.\".format(nom, age))\n</code></pre>"},{"location":"python/#les-nombres-int-et-float","title":"Les nombres, <code>int</code> et <code>float</code>","text":"<p>L'un des avantages simplistes le plus rapidement visible de Python par rapport au Bash est le support natif des nombres.Il y a deux principaux types <code>builtins</code>, <code>int</code> et <code>float</code>. Le premier sert \u00e0 repr\u00e9senter des nombres entiers et le second des nombres \u00e0 virgules. Il existe un autre type, <code>complex</code> mais est assez rare et n\u00e9cessite des connaissances math\u00e9matiques pour le comprendre. Attention c'est un <code>.</code> pour d\u00e9limiter les d\u00e9cimales en Python, comme les anglais ! </p> <pre><code>&gt;&gt;&gt;type(2)\n&lt;class 'int'&gt;\n&gt;&gt;&gt;type(3.14)\n&lt;class 'float'&gt;\n</code></pre> <p>Ces types supportent des op\u00e9rations alg\u00e9briques classiques :  <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>//</code> (quotient entier), <code>%</code> (modulo ou reste de la division), <code>abs()</code> (valeur absolue), <code>**</code> (puissance).</p> <p><code>int()</code> et <code>float()</code> permettent aussi de convertir les nombres de <code>float</code> \u00e0 <code>int</code> et inversement. La conversion de <code>float</code> \u00e0 <code>int</code> arrondi au passage \u00e0 l'entier inf\u00e9rieur. Python est en mesure de convertir automatiquement les types si n\u00e9cessaire pour par exemple additionner un <code>int</code> avec un <code>float</code>.</p> <p><pre><code>&gt;&gt;&gt;int(2.5)\n2\n&gt;&gt;&gt;2.5 + 1\n3.5 # Ne renvoit pas d'erreurs\n&gt;&gt;&gt;2.5%1\n0.5\n</code></pre> Enfin, on peut convertir des <code>str</code> vers des nombres de la m\u00eame mani\u00e8re avec <code>int()</code> et <code>float()</code>. Cela est par exemple utile \u00e0 la lecture d'un fichier texte o\u00f9 le type par d\u00e9faut sera <code>str</code>.</p> <pre><code>&gt;&gt;&gt;int(\"2\")\n2\n</code></pre>"},{"location":"python/#les-booleens-bool","title":"Les bool\u00e9ens, <code>bool</code>","text":"<p>Le type <code>bool</code> en Python repr\u00e9sente les valeurs bool\u00e9ennes, qui peuvent \u00eatre soit <code>True</code> soit <code>False</code>. Ces valeurs sont utilis\u00e9es pour exprimer des conditions logiques et sont le r\u00e9sultat d'expressions de comparaison ou d'op\u00e9rations logiques.</p> <p>Par exemple :</p> <pre><code>&gt;&gt;&gt; a = 5\n&gt;&gt;&gt; b = 10\n&gt;&gt;&gt; a &lt; b\nTrue\n&gt;&gt;&gt; a &gt; b\nFalse\n</code></pre> <p>Les bool\u00e9ens sont souvent utilis\u00e9s dans les structures de contr\u00f4le, comme les instructions <code>if</code>, pour prendre des d\u00e9cisions dans le code. </p>"},{"location":"python/#types-built-ins-de-structures-de-donnees","title":"Types built-ins de structures de donn\u00e9es","text":""},{"location":"python/#les-listes-list","title":"Les listes, <code>list</code>","text":"<p>L'un des types d'objets les plus manipul\u00e9 en Python est la liste. Une liste est form\u00e9 d'une succession d'objets ind\u00e9x\u00e9s. On peut en construire en listant des objets s\u00e9par\u00e9s par une virgule et en les entourants de <code>[]</code>.</p> <p>Une liste index\u00e9e, on peut donc r\u00e9cup\u00e9rer un \u00e9l\u00e9ment pr\u00e9cis via son placement dans la liste. L'indexe commence \u00e0 0. Le type d'une liste est <code>list</code>.</p> <pre><code>&gt;&gt;&gt;ma_liste = [\"hello\", 2, 2+3, \"world\"]\n&gt;&gt;&gt;ma_liste[0] # Renverra \"hello\"\n&gt;&gt;&gt;ma_liste[3] # Renverra \"world\"\n&gt;&gt;&gt;ma_liste[-1] # Renverra \"world\"\n&gt;&gt;&gt;ma_liste[0:2] # Renverra une liste avec les \u00e9l\u00e9ments de 0 \u00e0 2 exclus ['hello', 2]\n</code></pre> <p>Les listes comme la plupart des objets supportent des m\u00e9thodes par d\u00e9faut. Les m\u00e9thodes les plus courantes permettent d'ajouter un \u00e9l\u00e9ment \u00e0 la liste, d'en enlever, de l'inverses etc ...</p> <pre><code>ma_liste.append(3) # Ajoute \u00e0 la fin de la liste un 3\nma_liste.pop(i) # Enl\u00e8ve l'objet \u00e0 la position i\nma_liste.count(x) # Compte le nombre d'occurence de x dans la liste\nma_liste.reverse() # Inverse l'ordre de la liste\n</code></pre>"},{"location":"python/#tuples-sequences","title":"tuples / sequences","text":""},{"location":"python/#les-dictionnaires-hash-map","title":"Les dictionnaires (hash map)","text":"<p>Une autre structure de donn\u00e9es utile est le dictionnaire (de type <code>dict</code>). Un dictionnaire est une liste o\u00f9 les index sont des cl\u00e9s compr\u00e9hensibles et non juste un num\u00e9ro. <pre><code>mon_dict = {\"pays\": \"France\", \"ville\": \"Paris\", \"Rivi\u00e8re\": \"Seine\"}\nmon_dict[\"pays\"] # Retournera 'France'\n</code></pre></p> <p>Les \u00e9l\u00e9ments d'un dictionnaire peuvent \u00eatre ajout\u00e9s ou modifi\u00e9s en utilisant la cl\u00e9 entre crochets. <pre><code>mon_dict[\"ville\"] = \"Nice\"  # Modifie la valeur associ\u00e9e \u00e0 la cl\u00e9 \"ville\"\nmon_dict[\"region\"] = \"PACA\"  # Ajoute une nouvelle paire cl\u00e9-valeur\n</code></pre> On peut supprimer des \u00e9l\u00e9ments \u00e0 l'aide de la fonction <code>del</code> ou de la m\u00e9thode <code>pop()</code>. <pre><code>del d[\"ville\"]  # Supprime la paire cl\u00e9-valeur avec la cl\u00e9 \"ville\"\nregion = d.pop(\"region\")  # Supprime et retourne la valeur associ\u00e9e \u00e0 \"region\"\n</code></pre></p> <p>Methodes utiles:</p> <ul> <li> <p><code>keys()</code> : Retourne un objet vue contenant toutes les cl\u00e9s. <pre><code>cles = mon_dict.keys()   # Retourne dict_keys(['pays', 'ville', 'Rivi\u00e8re'])\n</code></pre></p> </li> <li> <p><code>values()</code> : Retourne un objet vue contenant toutes les valeurs. <pre><code>valeurs = mon_dict.values() # Retourne dict_values(['France', 'Paris', 'Seine'])\n</code></pre></p> </li> <li> <p><code>items()</code> : Retourne un objet vue contenant toutes les paires cl\u00e9-valeur. <pre><code>paires = mon_dict.items()  # Retourne dict_items([('pays', 'France'), ('ville', 'Paris'), ('Rivi\u00e8re', 'Seine')])\n</code></pre></p> </li> </ul> <p>Ces objets (<code>dict_items</code>, <code>dict_values</code> et <code>dict_keys</code>) peuvent \u00eatre convertis facilement en <code>list</code> : <pre><code>valeurs = list(mon_dict.values())\nprint(list) # ['France', 'Paris', 'Seine']\n</code></pre></p>"},{"location":"python/#sets","title":"Sets","text":""},{"location":"python/#structures-de-controle","title":"Structures de contr\u00f4le","text":""},{"location":"python/#conditons-if","title":"Conditons <code>if</code>","text":"<p><code>if</code> est l'une des structures les plus connue et utile en informatique. Sur Python la syntaxe est la suivante :</p> <pre><code>x = int(input(\"Entrez un nombre\")) # Demande \u00e0 l'utilisateur d'entrer un nombre (initialement en str) et le convertit en int.\nif x &lt; 0:\n    print(\"Le nombre est n\u00e9gatif\")\nelif x &gt; 0:\n    print(\"Le nombre est positif\")\nelse:\n    print(\"Le nombre est \u00e9gal \u00e0 0\")\n</code></pre>"},{"location":"python/#boucles-for","title":"Boucles <code>for</code>","text":"<p>Les boucles <code>for</code> en python permettent d'it\u00e9rer sur un it\u00e9rable, comme une liste par exemple.</p> <pre><code>animaux = [\"Chien\", \"Chat\", \"Poisson\"]\nfor animal in animaux:\n    print(animal)\n</code></pre> <p>Pour it\u00e9rer de mani\u00e8re plus classique un certain nombre de fois on doit cr\u00e9er un it\u00e9rable de cette longueur. <code>range()</code> est tr\u00e8s pratique pour cela.</p> <pre><code>for i in range(10)\n    print(i)\n</code></pre> <p>Cette boucle it\u00e8rera 10 fois avec <code>i</code> allant de 0 \u00e0 9.</p>"},{"location":"python/#boucles-while","title":"Boucles <code>while</code>","text":"<p>La boucle <code>while</code> est aussi pr\u00e9sente en python et poss\u00e8de comme syntaxe : </p> <pre><code>n = 0\nwhile n &lt; 10: \n    print(n)\n    n+=1 # \u00e9quivalent plus rapide de n = n + 1\n</code></pre>"},{"location":"python/#mots-cles-break-et-continue","title":"Mots cl\u00e9s <code>break</code> et <code>continue</code>","text":"<p>Le mot cl\u00e9 <code>break</code> permet de finir plus t\u00f4t une boucle dans son enti\u00e8ret\u00e9 tandis que le mot cl\u00e9 continue permet de sauter directement \u00e0 l'it\u00e9ration suivante.</p> <pre><code>for n in range(10):\n    if n == 2:\n        continue\n    if n == 5:\n        break\n    print(n)\n</code></pre> <p>Cette boucle renverra : </p> <pre><code>0\n1\n3\n4\n</code></pre>"},{"location":"python/#fonctions","title":"Fonctions","text":"<p>Les fonctions en Python sont des blocs de code r\u00e9utilisables qui ex\u00e9cutent une t\u00e2che sp\u00e9cifique. Elles permettent de structurer le code, le rendre plus lisible et \u00e9viter la duplication.</p> <p>Une fonction en Python est d\u00e9finie avec le mot cl\u00e9 <code>def</code>, il est suivi du nom de la fonction et de parenth\u00e8ses d\u00e9finissant des param\u00e8tres pour la fonction.</p> <p>Le bloc de code de la fonction est indent\u00e9.</p> <pre><code>def carre(nombre):\n    if type(nombre) is int or type(nombre) is float:\n    # if isinstance(nombre, (int, float)): serait plus propre\n        return nombre**2\n    else:\n        print(\"Ce n'est pas un nombre\")\n</code></pre> <pre><code>&gt;&gt;&gt;carre\n&lt;function carre at 0x77943898a2a0&gt;\n</code></pre> <p>On appel une fonction via son nom avec des parenth\u00e8ses et dans les parenth\u00e8ses les param\u00e8tres voulus. Comme en math\u00e9matiques <code>f</code> repr\u00e9sente la fonction et <code>f(param\u00e8tres)</code> repr\u00e9sente l'image de la fonction, sa valeur trait\u00e9e.</p> <pre><code>&gt;&gt;&gt;n = 4\n&gt;&gt;&gt;n2 = carre(n)\n&gt;&gt;&gt;print(n2)\n16\n</code></pre> <p>Une fonction peut \u00eatre termin\u00e9e avec le mot cl\u00e9 <code>return</code>, ce mot cl\u00e9 permet de renvoyer le r\u00e9sultat de l'expression du <code>return</code> \u00e0 l'appel de la fonction. Si la fonction ne passe pas par un <code>return</code> elle sortira naturellement et renverra <code>None</code>.</p> <pre><code>&gt;&gt;&gt;n = \"hello\"\n&gt;&gt;&gt;n2 = carre(n)\nCe n'est pas un nombre\n&gt;&gt;&gt;print(type(n2))\n&lt;class 'NoneType'&gt;\n</code></pre> <p>Les fonctions peuvent avoir des param\u00e8tres par d\u00e9faut, des arguments nomm\u00e9s et des arguments variables.</p> <pre><code>def saluer(nom, message=\"Bonjour\"):\n    print(message, nom)\nsaluer(\"Alice\")            # Affiche \"Bonjour Alice\"\nsaluer(\"Bob\", \"Salut\")     # Affiche \"Salut Bob\"\n</code></pre>"},{"location":"python/#lire-et-ecrire-dans-des-fichiers","title":"Lire et \u00e9crire dans des fichiers","text":""},{"location":"python/#ouverture-dun-fichier","title":"Ouverture d'un fichier","text":"<p>Pour ouvrir un fichier en Python, on utilise la fonction <code>open()</code>. Cette fonction prend deux arguments principaux : le nom du fichier et le mode d'ouverture.</p> <pre><code># Ouverture d'un fichier en lecture\nfichier = open('mon_fichier.txt', 'r')\n\n# Ouverture d'un fichier en \u00e9criture (cr\u00e9e le fichier s'il n'existe pas)\nfichier = open('mon_fichier.txt', 'w')\n\n# Ouverture d'un fichier en mode ajout (ajoute \u00e0 la fin du fichier)\nfichier = open('mon_fichier.txt', 'a')\n</code></pre>"},{"location":"python/#lecture-de-fichier","title":"Lecture de fichier","text":"<p>Pour lire le contenu d'un fichier, on peut utiliser diff\u00e9rentes m\u00e9thodes :</p> <p><pre><code># Lire tout le contenu\ncontenu = fichier.read()\n\n# Lire ligne par ligne\nligne = fichier.readline()\n\n# Lire toutes les lignes dans une liste\nlignes = fichier.readlines()\n</code></pre> Exemple :</p> <pre><code>with open('mon_fichier.txt', 'r') as fichier:\n    contenu = fichier.read()\n    print(contenu)\n</code></pre>"},{"location":"python/#ecriture-dans-un-fichier","title":"\u00c9criture dans un fichier","text":"<p>Pour \u00e9crire dans un fichier, on utilise la m\u00e9thode <code>write()</code>.</p> <pre><code>with open('mon_fichier.txt', 'w') as fichier:\n    fichier.write('Bonjour, monde!\\n')\n    fichier.write('Voici une autre ligne.')\n</code></pre> <p>En mode <code>'w'</code>, si le fichier n'existe pas, il est cr\u00e9\u00e9. Si le fichier existe d\u00e9j\u00e0, son contenu est \u00e9cras\u00e9.</p>"},{"location":"python/#fermeture-dun-fichier","title":"Fermeture d'un fichier","text":"<p>Il est crucial de fermer un fichier apr\u00e8s avoir fini de l'utiliser pour lib\u00e9rer les ressources. Cela peut se faire avec la m\u00e9thode <code>close()</code> ou automatiquement avec une clause <code>with</code> :</p> <pre><code>fichier.close()\n</code></pre> <p>Cependant, l'utilisation de <code>with</code> est pr\u00e9f\u00e9rable car elle assure que le fichier est correctement ferm\u00e9 m\u00eame si une erreur survient pendant les op\u00e9rations de lecture ou d'\u00e9criture.</p>"},{"location":"python/#erreurs-et-exceptions","title":"Erreurs et exceptions","text":"<p>La gestion des exceptions en Python est une partie essentielle du langage, permettant de g\u00e9rer les erreurs de mani\u00e8re \u00e9l\u00e9gante et de maintenir le bon fonctionnement du programme. Voici un aper\u00e7u des concepts et pratiques de base pour g\u00e9rer les exceptions.</p> <p>Une exception est une erreur d\u00e9tect\u00e9e lors de l'ex\u00e9cution d'un programme. Python utilise un mod\u00e8le bas\u00e9 sur la lev\u00e9e et la gestion d'exceptions pour g\u00e9rer ces erreurs.</p>"},{"location":"python/#structure-try-except","title":"Structure try-except","text":"<p>Pour capturer et g\u00e9rer les exceptions, on utilise les blocs <code>try-except</code>. Le code susceptible de provoquer une exception est plac\u00e9 dans le bloc <code>try</code>, et le bloc <code>except</code> est utilis\u00e9 pour g\u00e9rer l'erreur.</p> <p><pre><code>try:\n    # Code pouvant provoquer une exception\n    result = 10 / 0\nexcept ZeroDivisionError:\n    # Code ex\u00e9cut\u00e9 si une exception de type ZeroDivisionError est lev\u00e9e\n    print(\"Erreur : division par z\u00e9ro.\")\n</code></pre> Dans cet exemple, la division par z\u00e9ro l\u00e8ve une exception <code>ZeroDivisionError</code>, qui est ensuite captur\u00e9e par le bloc <code>except</code>.</p>"},{"location":"python/#gestion-de-plusieurs-exceptions","title":"Gestion de Plusieurs Exceptions","text":"<p>Il est possible de g\u00e9rer plusieurs types d'exceptions en utilisant plusieurs blocs <code>except</code>.</p> <pre><code>try:\n    fichier = open('non_existent_file.txt', 'r')\nexcept FileNotFoundError:\n    print(\"Le fichier n'a pas \u00e9t\u00e9 trouv\u00e9.\")\nexcept IOError:\n    print(\"Une erreur d'entr\u00e9e/sortie est survenue.\")\n</code></pre> <p>Ici, on g\u00e8re sp\u00e9cifiquement les exceptions <code>FileNotFoundError</code> et <code>IOError</code>.</p>"},{"location":"python/#utilisation-de-else-et-finally","title":"Utilisation de <code>else</code> et <code>finally</code>","text":"<p>Le bloc <code>else</code> est ex\u00e9cut\u00e9 si aucune exception n'est lev\u00e9e dans le bloc <code>try</code>. Le bloc <code>finally</code> est ex\u00e9cut\u00e9 en toutes circonstances, qu'une exception ait \u00e9t\u00e9 lev\u00e9e ou non, et est typiquement utilis\u00e9 pour le nettoyage, comme la fermeture de fichiers ou la lib\u00e9ration de ressources.</p> <pre><code>try:\n    fichier = open('mon_fichier.txt', 'r')\n    contenu = fichier.read()\nexcept FileNotFoundError:\n    print(\"Le fichier n'a pas \u00e9t\u00e9 trouv\u00e9.\")\nelse:\n    print(\"Le fichier a \u00e9t\u00e9 lu avec succ\u00e8s.\")\nfinally:\n    if 'fichier' in locals():\n        fichier.close()\n    print(\"Le fichier est ferm\u00e9.\")\n</code></pre>"},{"location":"python/#levee-dexceptions","title":"Lev\u00e9e d'Exceptions","text":"<p>Il est possible de lever des exceptions manuellement avec l'instruction <code>raise</code>.</p> <pre><code>def verifie_age(age):\n    if age &lt; 0:\n        raise ValueError(\"L'\u00e2ge ne peut pas \u00eatre n\u00e9gatif.\")\n    return age\n\ntry:\n    verifie_age(-1)\nexcept ValueError as e:\n    print(e)\n</code></pre> <p>Dans cet exemple, une exception <code>ValueError</code> est lev\u00e9e si l'\u00e2ge est n\u00e9gatif.</p>"},{"location":"shell/cheatsheet-shell/","title":"Cheatsheet des Commandes Unix","text":"<p>Le manuel, souvent appel\u00e9 \"man\", est une collection de pages de documentation pour les commandes Unix et les programmes. Chaque page fournit une description d\u00e9taill\u00e9e de l'utilisation, des options, des exemples et de la syntaxe d'une commande ou d'un programme sp\u00e9cifique.</p> <p>La commande <code>man</code> est utilis\u00e9e pour afficher ces pages de manuel. Par exemple, <code>man ls</code> affiche la documentation pour la commande <code>ls</code>. Cette documentation est essentielle pour comprendre les diff\u00e9rentes options et usages des commandes disponibles dans le syst\u00e8me Unix.</p>"},{"location":"shell/cheatsheet-shell/#commandes-de-base","title":"Commandes de Base","text":"<ul> <li><code>pwd</code> : Affiche le chemin du r\u00e9pertoire de travail actuel.</li> <li><code>cd [r\u00e9pertoire]</code> : Change le r\u00e9pertoire courant.</li> <li><code>ls</code> : Liste les fichiers et r\u00e9pertoires.</li> <li><code>ls -l</code> : Liste d\u00e9taill\u00e9e, avec notamment les droits.</li> <li><code>ls -a</code> : Inclut les fichiers cach\u00e9s.</li> </ul>"},{"location":"shell/cheatsheet-shell/#gestion-des-fichiers-et-repertoires","title":"Gestion des Fichiers et R\u00e9pertoires","text":"<ul> <li><code>cp [source] [destination]</code> : Copie des fichiers.</li> <li><code>cp -r [source] [destination]</code> : Copie r\u00e9cursive pour les r\u00e9pertoires.</li> <li><code>mv [source] [destination]</code> : D\u00e9place ou renomme des fichiers/r\u00e9pertoires.</li> <li><code>rm [fichier]</code> : Supprime des fichiers.</li> <li><code>rm -r [r\u00e9pertoire]</code> : Supprime des r\u00e9pertoires et leur contenu.</li> <li><code>mkdir [r\u00e9pertoire]</code> : Cr\u00e9e un nouveau r\u00e9pertoire.<ul> <li><code>mkdir -p [r\u00e9pertoire]</code> : Cr\u00e9e un nouveau r\u00e9pertoire et les r\u00e9pertoires parents si n\u00e9cessaires et ne renvoit pas d'erreur si le r\u00e9pertoire existe.</li> </ul> </li> </ul>"},{"location":"shell/cheatsheet-shell/#visualisation-et-edition-de-fichiers","title":"Visualisation et Edition de Fichiers","text":"<ul> <li><code>cat [fichier]</code> : Affiche le contenu d'un fichier.</li> <li><code>less [fichier]</code> : Affiche le contenu d'un fichier page par page.</li> <li><code>head -n [nombre] [fichier]</code> : Affiche les premi\u00e8res lignes d'un fichier ou du <code>stdin</code> sans fichier.</li> <li><code>tail -n [nombre] [fichier]</code> : Affiche les derni\u00e8res lignes d'un fichier ou du <code>stdin</code> sans fichier.</li> <li><code>vim [fichier]</code> : Editeur de texte modal.</li> <li><code>diff [fichier1] [fichier2]</code> : Affiche la diff\u00e9rence entre deux fichiers.</li> </ul>"},{"location":"shell/cheatsheet-shell/#filtrage-de-texte","title":"Filtrage de Texte","text":"<ul> <li><code>grep [motif] [fichier]</code> : Recherche un motif dans un fichier ou dans le <code>stdin</code> sans fichier.</li> <li><code>grep -r [motif] [r\u00e9pertoire]</code> : Recherche r\u00e9cursive dans les fichiers d'un r\u00e9pertoire.</li> <li><code>uniq</code> : Supprime les doublons (n\u00e9cessite un tri pr\u00e9alable).</li> <li><code>sort [fichier]</code> : Trie le contenu d'un fichier ou du <code>stdin</code> sans fichier.</li> <li><code>sort -u [fichier]</code> : Trie le conteu et supprime les doublons.</li> <li><code>cut -d [d\u00e9limiteur] -f [champs] [fichier]</code> : Coupe les champs d'un fichier texte.</li> <li><code>sed 's/[motif]/[remplacement]/g' [fichier]</code> : Stream Editor pour filtrer et transformer le texte; ici, remplace tous les occurrences de \"motif\" par \"remplacement\". Sans fichier fourni il prendra le <code>stdin</code></li> </ul>"},{"location":"shell/cheatsheet-shell/#gestion-des-processus","title":"Gestion des Processus","text":"<ul> <li><code>ps</code> : Affiche les processus en cours.</li> <li><code>ps aux</code> : Affiche tous les processus avec d\u00e9tails.</li> <li><code>top</code> : Affiche en temps r\u00e9el les processus les plus gourmands.</li> <li><code>kill [PID]</code> : Termine le processus avec le PID sp\u00e9cifi\u00e9.</li> </ul>"},{"location":"shell/cheatsheet-shell/#permissions-et-proprietes","title":"Permissions et Propri\u00e9t\u00e9s","text":"<ul> <li><code>chmod [permissions] [fichier]</code> : Change les permissions d'un fichier.</li> <li><code>chmod 755 [fichier]</code> : Donne les permissions <code>rwxr-xr-x</code>.</li> <li><code>chown [utilisateur]:[groupe] [fichier]</code> : Change le propri\u00e9taire et le groupe d'un fichier.</li> <li><code>chgrp [groupe] [fichier]</code> : Change le groupe d'un fichier.</li> </ul>"},{"location":"shell/cheatsheet-shell/#reseau-et-connexions","title":"R\u00e9seau et Connexions","text":"<ul> <li><code>ping [adresse]</code> : V\u00e9rifie la connectivit\u00e9 vers une adresse IP.</li> <li><code>ifconfig</code> : Affiche les configurations r\u00e9seau des interfaces.</li> <li><code>wget [URL]</code> : T\u00e9l\u00e9charge un fichier depuis une URL.</li> </ul>"},{"location":"shell/cheatsheet-shell/#autres-utilitaires","title":"Autres Utilitaires","text":"<ul> <li><code>echo [texte]</code> : Affiche un texte.</li> <li><code>date</code> : Affiche ou modifie la date et l'heure syst\u00e8me.</li> <li><code>history</code> : Affiche l'historique des commandes.</li> <li><code>alias [alias]='[commande]'</code> : Cr\u00e9e un alias pour une commande.</li> <li><code>xargs</code> : Construit et ex\u00e9cute des commandes \u00e0 partir du <code>stdin</code>, utilis\u00e9 pour manipuler des arguments.</li> <li><code>tr 'car1' 'car2'</code> : Transcode les caract\u00e8res, ici remplace les occurrences de 'car1' par 'car2' dans le <code>stdin</code>. On peut notamment utiliser <code>tr [:upper:] [:lower:]</code> pour passer tout les caract\u00e8res en minuscule.</li> </ul>"},{"location":"shell/cheatsheet-shell/#redirection-et-pipes","title":"Redirection et Pipes","text":"<ul> <li><code>command1 &gt; fichier</code> : Redirige la sortie standard de <code>command1</code> vers <code>fichier</code>.</li> <li><code>command1 &gt;&gt; fichier</code> : Ajoute la sortie standard de <code>command1</code> \u00e0 <code>fichier</code>.</li> <li><code>command1 2&gt; fichier</code> : Redirige les erreurs (stderr) de <code>command1</code> vers <code>fichier</code>.</li> <li><code>command1 | command2</code> : Utilise la sortie de <code>command1</code> comme entr\u00e9e pour <code>command2</code>.</li> </ul>"},{"location":"shell/shell/","title":"Le Shell - les bases","text":""},{"location":"shell/shell/#quest-ce-quun-shell","title":"Qu'est ce qu'un shell","text":"<p>Un shell Unix est une interface homme machine (IHM) en ligne de commande (CLI). Il fournit \u00e0 la fois un langage de commandes interactives et un langage de scripting. Le shell traite des commandes ou scripts.</p> <p>Il ne faut pas confondre un shell avec un terminal. Un terminal \u00e9tait initialement physiquement un \u00e9cran et un clavier. Aujourd'hui lorsque l'on parle de terminal on parle d'\u00e9mulateur de terminal, c'est une cat\u00e9gorie de logiciels permettant de fournir un GUI pour lancer des shells (bash, python, zsh, fish, powershell, ruby ...). \u00c9mulateur de terminaux connus : alacritty, Windows Terminal, urxvt, GNOME Terminal, PuTTY.</p> <p>La confusion est courante car sur Windows historiquement le nom du shell et de l'\u00e9mulateur de terminal \u00e9taient les m\u00eames (cmd, powershell...), ce n'est plus le cas avec Windows 11 et le Windows Terminal.</p>"},{"location":"shell/shell/#differents-shells-unix","title":"Diff\u00e9rents shells Unix","text":"<p><code>sh</code> (shell command langage) est une sp\u00e9cification de langage d\u00e9finie par POSIX mais n'est pas une impl\u00e9mentation en elle m\u00eame. Il y a diverses impl\u00e9mentations, la plus connue \u00e9tannt Bash. Le fichier <code>/bin/sh</code> est en r\u00e9alit\u00e9 un lien symbolique vers une impl\u00e9mentation sur la plupart des syst\u00e8mes Linux, souvent bash. <code>ls -l /bin/sh</code> Bash est l'impl\u00e9mentation la plus connue et utilis\u00e9e, nous utiliserons donc Bash au cours de cours. Quelques autres impl\u00e9mentations connues sont Ksh (Korn Shell), qui est une impl\u00e9mentation plus ancienne que Bash et surtout pr\u00e9sente sur des syst\u00e8mes moins r\u00e9cents. Zsh est l'impl\u00e9mentation par d\u00e9faut sur MacOS et offre aussi des fonctionnalit\u00e9s pratiques en mode int\u00e9ractif (compl\u00e9tion tab avec un menu navigable ou encore une forte customisabilit\u00e9 par exemple).</p> <p>Quasiment tout les shells Unix suivent a minima ce qui est d\u00e9crit par POSIX, la plupart rajoutent ensuite diverses fonctionnalit\u00e9s. Lorsque l'on fait un script qui serait amen\u00e9 \u00e0 \u00eatre utilis\u00e9 sur divers syst\u00e8mes qui n'auraient pas forc\u00e9ment le m\u00eame shell il peut \u00eatre judicieux de se contenter d'utiliser ce que POSIX d\u00e9crit. Exemple de fonctionnalit\u00e9 disponible sur Bash et qui n'est pas \"POSIX compliant\" :  <code>test</code> et <code>[]</code> sont POSIX compliant mais <code>[[]]</code> ne l'est pas. Les deux premiers sont strictements pareils, <code>[</code> \u00e9tant un alias de test, le dernier permet notamment d'utiliser des \"Wildcards Patterns\" comme <code>*</code>.</p> <p>Pour information lancer un script via /bin/sh avec /bin/sh \u00e9tant un symlink vers bash va lancer bash en mode posix ce qui rendra bash le plus POSIX compliant possible. Bash POSIX Mode</p> <p>En pratique il est rare d'utiliser des fonctionnalit\u00e9s non disponibles sur d'autres shell tout comme il est au final rare d'utiliser autre chose que Bash, n\u00e9anmoins il peut \u00eatre utile de garder ceci dans un coin de la t\u00eate.</p>"},{"location":"shell/shell/#rendre-un-script-executable","title":"Rendre un script ex\u00e9cutable","text":"<p>Pour qu'un script soit \u00e9x\u00e9cutable sur Linux, que ce soit un script Shell, Python ou autre, il faut que celui-ci ait des droits d'ex\u00e9cution. Pour v\u00e9rifier qu'un fichier poss\u00e8de ces droits on peut utiliser <code>ls -l script.sh</code> pour lister ses permissions.</p> <p>Si un script de ne les poss\u00e8de pas on peut les rajouter avec <code>chmod +x script.sh</code>. Cela rajoutera pour tout le monde les permissions. Par d\u00e9faut sur linux les permissions sont g\u00e9rables \u00e0 trois niveau, le propri\u00e9taire du fichier, le groupe du fichier et tout le monde.</p> <p>Si l'on veut rajouter le <code>x</code>, l'ex\u00e9cution, sur un type pr\u00e9cis on peut le pr\u00e9ciser avec la lettre correspondante. <code>o</code> pour tout le monde (others), <code>g</code> pour groupe et <code>u</code> pour le propri\u00e9taire (user).</p> <p><pre><code>\u276f ls -l script.sh\n-rw-r--r-- 1 root root 0 23 mai 23:00 script.sh\n</code></pre> Le script n'a pas de x dans ses permissions <pre><code>\u276f chmod ug+x script.sh\n\u276f ls -l script.sh\n-rwxr-xr-- 1 root root 0 23 mai 23:00 script.sh\n</code></pre> Le script a des permissions d'ex\u00e9cution sur l'user et le groupe.</p> <p>Une fois un script rendu ex\u00e9cutable on peut le lancer en mettant directement son chemin dans le shell.</p> <p>Soit de mani\u00e8re absolue ou encore de mani\u00e8re relative. <pre><code>/chemin/vers/le/script.sh\n./script.sh\n</code></pre> La m\u00e9thode relative est, justement, relative \u00e0 la position actuelle du terminal. <code>.</code> repr\u00e9sente dans le shell le dossier actuel, donc si vous ne vous situez pas au bon endroit cela ne fonctionnera pas.</p> <p><code>..</code> repr\u00e9sente le dossier avant le dossier actuel, on peut utiliser les deux pour atteindre n'importe quel fichier du syst\u00e8me mais il est parfois plus simple d'utiliser le chemin entier.</p> <p>Lorsque le script est appel\u00e9 le shell va chercher un logiciel avec lequel lire notre script. Cela peut par exemple \u00eatre python ou bash. Par d\u00e9faut Linux va tenter d'ex\u00e9cuter le script avec le shell actuel, donc bash si c'est un shell bash par exemple. Ce qui n'est pas tr\u00e8s fiable ni possible pour un script autre que bash.</p> <p>Pour cela on peut <code>#!</code> tout au d\u00e9but du script suivi du binaire voulu, ceci est appel\u00e9 un <code>shebang</code>. <pre><code>#!/usr/bin/python3\n\n...contenu du script....\n</code></pre></p> <p>Enfin une autre mani\u00e8re d'utiliser un script sans shebang ni permissions d'ex\u00e9cution et de directement l'appeler avec le binaire voulu. <pre><code>bash script.sh\npython script.py\n</code></pre></p>"},{"location":"shell/shell/#caracteres-speciaux","title":"Caract\u00e8res sp\u00e9ciaux","text":"<p>Dans un shell Linux certains caract\u00e8res ont une signification sp\u00e9ciale, en voici une liste non exhaustive. </p> <ul> <li><code>~</code> \"Tilde\". R\u00e9pertoire personnel, la plupart du temps /home/user.</li> <li><code>`</code> \"Backtick\". Utile pour ouvrir et ferm\u00e9 des substitutions de commandes.</li> <li><code>#</code> Marque le d\u00e9but d'un commentaire.</li> <li><code>|</code> Caract\u00e8re pipe, permet de faire des pipes Unix.</li> <li><code>*</code> Caract\u00e8re joker (wildcard), permet de se substituer n'importe quelle suite de caract\u00e8res. (<code>ls fichiers_*</code> par exemple)</li> <li><code>?</code> Permet de se substituer \u00e0 un seul caract\u00e8re.</li> <li><code>'</code> et <code>\"</code> Permet de d\u00e9limiter des cha\u00eenes de caract\u00e8res, utile par exemple pour des cha\u00eenes comportant des espaces. (<code>ls \"/fichier/avec/un espace\"</code>)</li> <li><code>;</code> D\u00e9fini la fin d'une commande. Utile pour faire plusieurs commandes sur une seule ligne sans lien logique entre elles.</li> <li><code>\\</code> Permet d'\u00e9chapper un caract\u00e8re pour lui enlever son effet \"sp\u00e9cial\". (<code>echo L\\'apostrophe peut se mettre comme ceci</code>)</li> </ul>"},{"location":"shell/shell/#redirections","title":"Redirections","text":"<p>Les flux standards sur Linux sont le standard out (<code>stdout</code>), standard error (<code>stderr</code>) et standard input (<code>stdin</code>). Normalement chaque processus Linux poss\u00e8de un flux de chaque par d\u00e9faut.</p> <p>Ces flux servent \u00e0 transmettre des donn\u00e9es entre une source et une sortie.  Les donn\u00e9es sur linux sont toujours du texte et la commande lanc\u00e9e repr\u00e9sente une des extr\u00e9mit\u00e9s de ces flux.</p> <p>Le <code>stdin</code> est le flux d'entr\u00e9e dans la commande lanc\u00e9e, le <code>stdout</code> la sortie normale de la comande et le <code>stderr</code> est le canal pour les erreurs.\\ Par d\u00e9faut le <code>stdout</code> et le <code>stderr</code> sont envoy\u00e9s dans le terminal en cours. On peut rediriger ces sorties vers d'autres scripts, commandes ou fichiers.\\</p> <p>Sur Linux tout est un fichier, m\u00eame ces trois flux, ils sont d\u00e9nomm\u00e9s <code>0</code> pour le <code>stdin</code>, <code>1</code> pour le <code>stdout</code> et <code>2</code> pour le <code>stderr</code>. Ces fichiers sont situ\u00e9s dans <code>/proc/PID/fd</code>. </p> <p>Redirection vers un fichier: </p> <p>On peut utiliser <code>&gt;</code> et <code>&gt;&gt;</code> pour rediriger le stdout vers un fichier, les doubles chevrons permettent d'ajouter \u00e0 la fin d'un fichier d\u00e9j\u00e0 existant tandis que le simple chevron \u00e9crase le fichier. Dans les deux cas si le fichier n'existait pas il sera cr\u00e9\u00e9.</p> <p>Cela ne redirige pas le <code>stderr</code> par d\u00e9faut. Script d'exemple :  <pre><code>\\#!/bin/sh\necho hello world\ncat nexistepas \n</code></pre></p> <pre><code>chmod +x test.sh\n./test.sh &gt; out\n</code></pre> <p>On peut expliciter ce qui est redirig\u00e9 en pr\u00e9cisant le num\u00e9ro du fichier correspondant. <pre><code>./test.sh 2&gt; errors\n./test.sh 1&gt; out\n./test.sh 1&gt; out 2&gt; errors\n</code></pre></p> <p>Si on veut rediriger \u00e0 la fois le <code>stdout</code> et le <code>stderr</code> vers le m\u00eame fichier avec une syntaxe plus courte que d'\u00e9crire deux fois le fichier on peut faire :  <pre><code>./test.sh &gt; out 2&gt;\\&amp;1\n</code></pre> Cela dit au shell de rediriger <code>2</code> (<code>stderr</code>) vers la m\u00eame sortie que <code>1</code> (<code>stdout</code>). </p> <p>Le <code>stdin</code> est un peu plus complexe \u00e0 visualiser sans redirection, par d\u00e9faut celui ci \u00e9tant le clavier.</p> <p>On peut aussi le rediriger, donc ne plus avoir le clavier comme input mais un fichier ou la sortie d'autre processus.</p> <p>Commen\u00e7ons par cr\u00e9er un fichier d'inputs:  <pre><code>seq 10 &gt; input\n</code></pre></p> <p>La commande <code>grep PATTERN FILE</code> permet de r\u00e9cup\u00e9rer dans du texte les lignes matchant un pattern. Elle accepte le nom d'un fichier en entr\u00e9e, on peut donc faire <code>grep 5 input</code> pour r\u00e9cup\u00e9rer la ligne o\u00f9 le <code>5</code> est pr\u00e9sent. N\u00e9anmoins si aucun fichier n'est fourni il va chercher \u00e0 match dans le stdin.</p> <pre><code>grep 5\n</code></pre> <p>On peut donc lui rediriger le stdin pour lui fournir notre fichier input de cette mani\u00e8re. Pour cela on utilise encore une fois des chevrons, mais cette fois ci dans l'autre sens. grep 5 &lt; input</p> <p>Il est \u00e0 noter que ces redirections peuvent \u00eatre plac\u00e9es n'importe o\u00f9 dans la commande, cela est aussi vrai pour les redirections de stderr et stdout. <pre><code>&lt; input grep 5\ngrep &lt; input 5\ngrep 2&gt;err 1&gt;out &lt; input 5\n</code></pre> On peut aussi rediriger la m\u00eame sortie vers plusieurs fichiers diff\u00e9rents. <pre><code>cat input &gt;out &gt;out2\n</code></pre></p> <p>Enfin parfois on veut enti\u00e8rement cach\u00e9 quelque chose. Il existe pour cela un fichier <code>/dev/null</code> sur Linux pens\u00e9 pour ceci. Un exemple d'utilisation et de <code>grep</code> dans un dossier ne contenant pas que des fichiers textes ce qui renverra des erreurs inutiles, qui peuvent \u00eatre cach\u00e9es en redirigeant <code>stderr</code> vers <code>/dev/null</code>.</p> <pre><code>grep -r PATTERN . 2&gt;/dev/null\n</code></pre>"},{"location":"shell/shell/#pipelines-linux","title":"Pipelines linux","text":"<p>Les pipes Linux permettent de rediriger le <code>stdout</code> d'une premi\u00e8re commande vers le <code>stdin</code> d'une seconde commande. Cela permet de cha\u00eener des processus et de gagner beaucoup de temps.</p> <pre><code>ls / | grep dev\nsystemctl | grep service\n</code></pre> <p>Ou encore une un peu plus \u00e9labor\u00e9e :  <pre><code>systemctl | grep service | cut -d \".\" -f 1 | xargs\n</code></pre></p> <p>Il est possible de rediriger aussi le <code>stderr</code> dans une pipe, soit en le redirigeant simplement vers le <code>stdout</code> soit en utilisant <code>|&amp;</code> <pre><code>\u276fcat nexistepas | grep \"Aucun fichier\" -c\ncat: nexistepas: Aucun fichier ou dossier de ce nom\n0\n</code></pre> <pre><code>\u276fcat nexistepas |&amp; grep \"Aucun fichier\" -c\n1\n</code></pre> <pre><code>\u276fcat nexistepas 2&gt;&amp;1 | grep \"Aucun fichier\" -c\n1\n</code></pre></p> <p>L'option <code>-c</code> de <code>grep</code> permet de compter le nombre correspondance avec le pattern voulu. On voit que dans le premier cas le <code>stderr</code> est affich\u00e9 dans le terminal tandis que dans les suivants il est envoy\u00e9 dans le <code>stdin</code> du <code>grep</code>.</p> <p>Un point important qui sera revu dans la partie parall\u00e9lisme est le fait que chacun des processus d'une s\u00e9rie de pipes est lanc\u00e9 d\u00e8s le d\u00e9but. Les processus n'attendent pas que le pr\u00e9c\u00e9dent soit fini pour d\u00e9marrer. La plupart des commandes linux classiques vont traiter les donn\u00e9es en entr\u00e9e (<code>stdin</code>) ligne par ligne et envoyer en sortie (<code>stdout</code>) aussi ligne par ligne. Le temps d'ex\u00e9cution est donc minor\u00e9 par le processus le plus long et n'est donc pas la somme du temps d'ex\u00e9cution de chaque processus.</p> <p>La commande <code>time</code> permet de mesurer le temps d'ex\u00e9cution d'une commande et donc de visualiser cette parall\u00e9lisation.</p> <pre><code>\u276ftime (sleep 5 | sleep 5)\n( sleep 5 | sleep 5; )  0,00s user 0,00s system 0% cpu 5,002 total\n</code></pre> <p>On voit bien que la pipeline s'est ex\u00e9cut\u00e9e en 5.002 secondes, soit le temps d'un <code>sleep 5</code> et non la somme des deux (\u00e0 0.001s pr\u00e8s). Dans cet exemple les deux processus sont ind\u00e9pendants et il n'y a pas d'int\u00e9r\u00eats \u00e0 la connexion du <code>stdout</code> du premier processus au <code>stdin</code> du second.</p>"},{"location":"shell/shell/#commande-et-processus-subsitution","title":"Commande et processus subsitution","text":""},{"location":"shell/shell/#substitution-de-commandes","title":"Substitution de commandes","text":"<p>Parfois on peut avoir envie de remplacer une partie d'une commande par le r\u00e9sultat d'autres commandes. On peut faire ceci via une substitution de commandes qui a pour syntaxe <code>$(commandes)</code> ou <code>`commandes`</code>, les deux syntaxes sont fonctionnellement pareils.</p> <p><pre><code>echo Le chemin du dossier actuel est $(pwd)\n</code></pre> La commande <code>pwd</code> signifie \"print working directory\" et affiche donc le chemin complet du dossier actuel.</p> <p>On peut aussi substituer une pipeline de commandes qui renverra le <code>stdout</code> final. <pre><code>echo \"Le syst\u00e8me d'exploitation est `uname -a | cut -d ' ' -f 1`\"\n</code></pre></p>"},{"location":"shell/shell/#substitution-de-processus","title":"Substitution de processus","text":"<p>La substitution de commande permet de remplacer par le <code>stdout</code> de la commande mais parfois on ne veut pas directement ce <code>stdout</code> mais on veut plut\u00f4t un fichier contenant ce contenu.  On peut faire cela via une substitution de processus qui a pour syntaxe <code>&lt;(commande)</code>.</p> <p>Ici la variable <code>--kubeconfig</code> attends un nom de fichier et pas directement son contenu, cependant nous poss\u00e9dons le contenu du kubeconfig dans une variable. On utilise donc une substitution de process. </p> <pre><code>kubectl --kubeconfig &lt;(echo $CONTENU_KUBECONFIG) apply -f dep.yml\n</code></pre>"},{"location":"shell/shell/#code-de-retour-et-operateurs-et","title":"Code de retour et op\u00e9rateurs &amp;&amp; et ||","text":"<p>Lorsqu'une commande finit de s'\u00e9x\u00e9cuter elle va renvoyer un code de retour qui d\u00e9pendra de son \u00e9tat de sortie. Si tout s'est bien pass\u00e9 celui ci sera \u00e9gal \u00e0 <code>0</code>, sinon, il sera souvent <code>1</code> ou un autre nombre en fonction de la commande en elle m\u00eame. Ce code est automatiquement stock\u00e9 dans la variable <code>$?</code> pour chaque commande et permet donc de faire des actions en fonction de sa valeur. Naturellement on peut imaginer utiliser une structure de contr\u00f4le tel qu'un <code>if else</code> pour manipuler ces codes de retour. Cependant Bash fournit une alternative plus pratique pour des cas simples avec <code>&amp;&amp;</code> et <code>||</code>.</p> <p>L'op\u00e9rateur Bash AND <code>&amp;&amp;</code> permet d'\u00e9x\u00e9cuter la commande \u00e0 droite de l'op\u00e9rateur si et seulement si la commande \u00e0 gauche a un code de retour \u00e0 <code>0</code>, tandis que l'op\u00e9rateur OR <code>||</code> ex\u00e9cutera la commande \u00e0 droite si et seulement si la commande \u00e0 gauche a un code de retour diff\u00e9rent de <code>0</code>.</p> <pre><code>\u276fls &amp;&amp; echo \"La commande est pass\u00e9e\" || echo \"La commande n'est pas pass\u00e9e\"\n*Vos fichiers*\nLa commande est pass\u00e9e\n</code></pre> <pre><code>\u276fcat nexistepas &amp;&amp; echo \"La commande est pass\u00e9e\" || echo \"La commande n'est pas pass\u00e9e\"\ncat: nexistepas: Aucun fichier ou dossier de ce nom\nLa commande n'est pas pass\u00e9e\n</code></pre> <p>Ces op\u00e9rateurs ont une associativit\u00e9 par la gauche. Cela permet donc d'utiliser en premier <code>&amp;&amp;</code> puis <code>||</code> pour traiter tout les cas en une ligne. Rappel associativit\u00e9 gauche : <code>a ~ b ~ c = (a ~ b)~c</code></p> <p>Cela implique qu'il faut donc mettre le <code>&amp;&amp;</code> avant le <code>||</code>.</p> <pre><code>\u276fcat nexistepas || echo \"La commande n'est pas pass\u00e9e\" &amp;&amp; echo \"La commande est pass\u00e9e\" \ncat: nexistepas: Aucun fichier ou dossier de ce nom\nLa commande n'est pas pass\u00e9e\nLa commande est pass\u00e9e\n</code></pre>"},{"location":"shell/shell/#structures-de-controle","title":"Structures de contr\u00f4le","text":""},{"location":"shell/shell/#les-tests","title":"Les tests","text":"<p>La commande <code>test</code> permet de tester si une expression est vraie ou fausse. Test renverra un code de retour de <code>0</code> si vraie et <code>1</code> si faux.</p> <pre><code>\u276ftest a = a\necho $?\n0\n</code></pre> <p>Les expressions se construisent via des op\u00e9rateurs de test qui sont, notamment : </p> <ul> <li><code>a = b</code> et <code>a != b</code> testent si les chaines de charact\u00e8res <code>a</code> et <code>ab</code> sont respectivement \u00e9gales et in\u00e9gales</li> <li><code>-z a</code> et <code>-n a</code> respectivement testent si la chaine de charact\u00e8res <code>a</code> est vide et ne l'est pas</li> <li><code>n1 -eq n2</code> et <code>n1 -ne n2</code> testent l'\u00e9galit\u00e9 et l'in\u00e9galit\u00e9 de deux nombres</li> <li><code>n1 -lt n2</code> et <code>n1 -gt n2</code> testent si <code>n1</code> est strictement plus petit que <code>n2</code> pour <code>-lt</code> et strictement plus grand pour <code>-gt</code>.</li> <li><code>n1 -le n2</code> et <code>n1 -ge n2</code> pareil mais inf\u00e9rieur/sup\u00e9rieur ou \u00e9gal.</li> </ul> <p>Il y aussi des op\u00e9rateurs purement logiques qui permettent de combiner plusieurs expressions entre elles: <code>! e</code> si <code>e</code> renvoi vrai si <code>e</code> est fausse et inversement. <code>e1 -a e2</code>  renvoi vrai si et seulement si <code>e1</code> et <code>e2</code> sont vrais. <code>e1 -o e2</code> renvoi vrai si <code>e1</code> ou <code>e2</code> ou les deux sont vrais.</p> <p>Exemples :  <pre><code>\u276ftest  5 -eq 2 -a 5 -eq 5\necho $?\n1\n</code></pre> <pre><code>\u276ftest 5 -eq 2 -o 5 -eq 5\necho $?\n0\n</code></pre> Plus d'op\u00e9rateurs pour construire des expressions sont disponibles sur le manuel de la commande (<code>man test</code>).</p> <p>La plupart du temps la commande <code>test</code> n'est pas utilis\u00e9e avec cette syntaxe. Son autre syntaxe plus commune est <code>[</code> :  <pre><code>[ \"hello\" = \"world\" ] \n</code></pre> Les espaces apr\u00e8s <code>[</code> et avant <code>]</code> sont importants. Ce serait comme \u00e9crire <code>test\"hello\" = \"world\"</code> ce qui ne peut pas fonctionner.</p> <p>Il existe aussi une autre notation <code>[[</code> qui apporte plus de fonctionnalit\u00e9s cependant cette version de <code>test</code> n'est pas POSIX. L'une de ces fonctionnalit\u00e9s est notamment le support du joker <code>*</code>.</p> <pre><code>A=\"VARIABLE_TEST\"\n[ $A = *TEST* ] =&gt; ne fonctionnera pas\n[[ $A = *TEST* ]] =&gt; fonctionne\n</code></pre>"},{"location":"shell/shell/#structure-if","title":"Structure if","text":"<p>Les <code>test</code> sont le plus souvent utilis\u00e9s avec la structure de contr\u00f4le <code>if</code>. Cette structure permet d'ex\u00e9cuter des actions si et seulement si la commande \u00e0 droite de <code>if</code> a un code de retour de <code>0</code>. </p> <p>La syntaxe est la suivante :  <pre><code>A=\"VARIABLE_TEST\"\nif [[ $A = *TEST* ]]\nthen\n    echo $A contient TEST\nfi\n</code></pre></p> <p>On peut rajouter des <code>else</code> pour faire une action dans le cas o\u00f9 le code de retour n'est pas <code>0</code> et m\u00eame refaire directement un autre <code>if</code> avec <code>elif</code>.</p> <pre><code>A=\"VARIABLE_TEST\"\nif [[ $A = *HELLO* ]]\nthen\n    echo $A contient HELLO\nelif [[ $A = *WORLD* ]]\nthen\n    echo $A contient WORLD\nelse\n    echo $A ne contient ni HELLO ni WORLD\nfi\n</code></pre>"},{"location":"shell/shell/#switch-case","title":"Switch case","text":"<p>Parfois on veut faire plusieurs tests en une seule fois, par exemple si l'on veut traiter les options d'entr\u00e9e d'un script ou encore comparer une variable avec plusieurs autres. On peut faire ceci avec un <code>switch case</code>. On peut ainsi r\u00e9\u00e9crire l'exemple pr\u00e9c\u00e9dent de cette mani\u00e8re :</p> <pre><code>A=\"VARIABLE_TEST\"\ncase $A in\n    HELLO) \n        echo $A contient HELLO\n        ;;\n    WORLD) \n        echo $A contient WORLD\n        ;;\n    *)\n        echo $A ne contient pas HELLO ni WORLD\n        ;;\nesac\n</code></pre> <p>Ces <code>switch case</code> sont tr\u00e8s souvent utilis\u00e9s pour traiter les options d'entr\u00e9es d'un script.</p>"},{"location":"shell/shell/#les-boucles","title":"Les boucles","text":"<p>Les boucles sont des structures de contr\u00f4les permettant d'it\u00e9rer plusieurs fois une m\u00eame action.  Il y a divers types de boucles. L'une d'elles est la boucle <code>while</code>. Celle si it\u00e8rera tant que la condition \u00e0 sa droite sera vraie.</p> <pre><code>n=0\nwhile [ $n -ne 10 ]\ndo\n    n=$(seq 10 | shuf -n 1)\n    echo Nombre al\u00e9atoire  $n\ndone\n</code></pre> <p><code>seq 10</code> permet de g\u00e9n\u00e9rer une liste de 1 \u00e0 10, <code>shuf -n 1</code> permet d'en s\u00e9lectionner un al\u00e9atoirement. Cette boucle <code>while</code> tournera donc tant que l'on ne tombe pas al\u00e9atoirement sur <code>n=10</code>.</p> <p>Une boucle tr\u00e8s similaire est <code>until</code>, qui fait exactement l'oppos\u00e9 et it\u00e8re tant que sa condition n'est pas vraie.</p> <pre><code>n=0\nuntil [ $n -eq 10 ]\ndo\n    n=$(seq 10 | shuf -n 1)\n    echo Nombre al\u00e9atoire  $n\ndone\n</code></pre> <p>Le dernier type de boucle est la boucle <code>for</code>, celle ci permet d'it\u00e9rer au travers de, par exemple, une liste. Cela permet soit de parcourir une liste et avoir une variable fix\u00e9e sur la valeur en cours :</p> <pre><code>for i in bash linux script\ndo\n    echo \"Cette boucle listera les mots de la liste : $i\"\ndone\n</code></pre> <p>Soit de contr\u00f4ler le nombre d'it\u00e9ration d'une action :</p> <pre><code>for i in {1..5}\ndo\n    echo \"Cette boucle s'ex\u00e9cutera 5 fois, $i\"\ndone\n</code></pre> <pre><code>for i in {1..5}\ndo\n    echo \"Cette boucle s'ex\u00e9cutera 5 fois, $i\"\ndone\n</code></pre> <p>Parfois on veut pouvoir sortir plus t\u00f4t d'une boucle ou bien passer directement \u00e0 l'it\u00e9ration suivante. On peut faire cela respectivement gr\u00e2ce \u00e0 <code>break</code> et <code>continue</code>.</p> <p><pre><code>for i in {1..8}\ndo\n    if [ $i -eq 3 ] \n    then\n        continue #Permet de skipper le reste de cette it\u00e9ration\n    fi\n    if [ $i -eq 5 ]\n    then\n        break #Sortira d\u00e9finitivement de la boucle\n    fi\n    echo \"Le nombre est $i\"\ndone\n</code></pre> Donnera :  <pre><code>Le nombre est 1\nLe nombre est 2\nLe nombre est 4\n</code></pre></p>"},{"location":"shell/shell/#variables","title":"Variables","text":"<p>On peut d\u00e9finir une variable de cette mani\u00e8re : </p> <pre><code>VARIABLE=\"contenu de la variable\"\n</code></pre> <p>If faut noter qu'il n'y a pas d'espace de part et d'autre du <code>=</code> et que toutes les variables sont stock\u00e9es en tant que cha\u00eene de caract\u00e8res.</p> <p>On peut aussi d\u00e9finir des variables en demandant dynamiquement \u00e0 l'utilisateur de les remplir gr\u00e2ce \u00e0 <code>read</code>. </p> <pre><code>read VARIABLE\n</code></pre> <p>Pour utiliser une variable il faut rappeler son nom avec un <code>$</code> devant. Cependant dans certains cas il peut \u00eatre n\u00e9cessaire d'encapsuler le nom de la variable dans <code>{}</code>.</p> <pre><code>KERNEL=\"Linux-6.9.9\"\necho Le kernel est $KERNEL\necho Cr\u00e9ons un fichier nomm\u00e9 $KERNEL_file # Renverra une variable vide\necho Cr\u00e9ons un fichier nomm\u00e9 ${KERNEL}_file # Fonctionnera\ntouch ${KERNEL}_file\n</code></pre> <p>Certaines variables sont d\u00e9j\u00e0 assign\u00e9es par Bash, voici une liste non exhaustive:</p> <ul> <li><code>$SHELL</code> : Le chemin du binaire du shell actuel</li> <li><code>$$</code> Le PID de la session Bash</li> <li><code>$?</code> Le dernier code de retour</li> <li><code>$@</code> La liste des arguments d'entr\u00e9e du script</li> <li><code>$#</code> Le nombre de ces arguments</li> <li><code>$n</code> avec <code>n</code> un chiffre. L'argument num\u00e9ro <code>n</code></li> </ul> <p>Les trois derniers sont particuli\u00e8rements utiles pour utiliser des arguments d'entr\u00e9e de script : <pre><code>#!/bin/sh\necho $#\necho $@\necho $3\n</code></pre> Renverra : </p> <pre><code>\u276f./script.sh 1 2 5\n3\n1 2 5\n5\n</code></pre>"},{"location":"shell/shell/#fonctions","title":"Fonctions","text":"<p>Une fonction permet d'encapsuler une s\u00e9rie de commandes et actions au sein d'une seule avec ses propres arguments. Il a y deux syntaxes pour d\u00e9finir une fonction :</p> <p><pre><code>function ma_fonction {\n    contenu de la fonction\n}\n</code></pre> et</p> <pre><code>ma_fonction () {\n    contenu de la fonction\n}\n</code></pre> <p>Le mot reserv\u00e9 <code>function</code> est donc optionnel mais si celui est omis alors les <code>()</code> deviennent obligatoires tandis qu'elles ne le sont pas dans le premier cas. Les parenth\u00e8ses ne servent fonctionnellement \u00e0 rien si ce n'est s'assurer qu'il n'y a pas d'ambiguiter et que l'on veut bien faire une fonction. Je recommande donc d'utiliser la premi\u00e8re syntaxe plus explicite.</p> <p>Si l'on veut utiliser des arguments on peut utiliser les variables built-ins $n pour r\u00e9cup\u00e9rer ces arguments au moment de l'appel de la fonction.</p> <pre><code>function ma_fonction () {\n    echo \"Les arguments sont : $1 $2\"\n}\nma_fonction arg1 arg2\n</code></pre> <p>Enfin, les variables sont de base globales dans une fonction. C'est \u00e0 dire qu'une variable d\u00e9finie \u00e0 l'int\u00e9rieur ou \u00e0 l'ext\u00e9rieure sera disponible \u00e0 l'int\u00e9rieur ou \u00e0 l'ext\u00e9rieur par d\u00e9faut. On peut cependant d\u00e9finir des variables locales qui n'existeront que dans la fonction.</p> <pre><code>var1=\"A\"\nvar2=\"B\"\nfunction ma_fonction {\n    local var1=\"C\"\n    var2=\"D\"\n    echo \"Les variables dans la fonction sont var1: $var1, var2: $var2\"\n}\nma_fonction\necho \"Les variables apr\u00e8s la fonction sont var1: $var1, var2: $var2\"\n</code></pre> <p>On voit bien que apr\u00e8s la fonctin la <code>$var1</code> s'est remise sur sa valeur pr\u00e9c\u00e9dente tandis que la <code>$var2</code> reste sur la valeur d\u00e9finie dans la fonction.</p>"},{"location":"shell/tp-shell/","title":"Travaux Pratique Shell","text":"<p>G\u00e9rer un peu des users R\u00e9cup\u00e9rer la liste des pourcentages de remplissages des filesystems Generate logs (?) with errors and what not Logrotate Parsing log et trouver les warnings, criticals etc Save dans un fichier dans un dossier</p> <p>plus tard python s'en occupera</p>"},{"location":"shell/tp-shell/#script","title":"Script","text":""},{"location":"shell/tp-shell/#sans-scripts","title":"Sans scripts","text":"<pre><code>df | tail -n +2 | tr -s \" \" | cut -d \" \" -f 5\n</code></pre>"}]}